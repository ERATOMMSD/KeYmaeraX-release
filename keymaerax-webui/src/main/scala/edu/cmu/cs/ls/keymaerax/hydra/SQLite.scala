/**
  * Copyright (c) Carnegie Mellon University.
  * See LICENSE.txt for the conditions of this license.
  */
/**
  * @note Code Review 2016-08-02 LemmaDB aspects only
  */
package edu.cmu.cs.ls.keymaerax.hydra

import java.io.FileOutputStream
import java.nio.channels.Channels

import edu.cmu.cs.ls.keymaerax.bellerophon.parser.{BelleParser, BellePrettyPrinter}
import edu.cmu.cs.ls.keymaerax.bellerophon.{BelleExpr, BelleProvable, SequentialInterpreter}
import edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary
import edu.cmu.cs.ls.keymaerax.core._
import edu.cmu.cs.ls.keymaerax.lemma._
import edu.cmu.cs.ls.keymaerax.parser.{KeYmaeraXParser, KeYmaeraXProblemParser}
import edu.cmu.cs.ls.keymaerax.tools.ToolEvidence
import edu.cmu.cs.ls.keymaerax.core.{Formula, Sequent}
import edu.cmu.cs.ls.keymaerax.pt.ProvableSig

import scala.collection.immutable.Nil
import scala.slick.driver.SQLiteDriver

//import Tables.TacticonproofRow
import scala.slick.jdbc.StaticQuery.interpolation
import scala.slick.driver.SQLiteDriver.simple._

/**
 * Created by nfulton on 4/10/15.
 */
object SQLite {

  import Tables._

  val ProdDB: SQLiteDB = new SQLiteDB(DBAbstractionObj.dblocation)
  /** Use this for all unit tests that work with the database, so tests don't infect the production database */
  val TestDB: SQLiteDB = new SQLiteDB(DBAbstractionObj.testLocation)

  /** Stores lemmas in the Lemma table of the given database. */
  class UncachedSQLiteLemmaDB(db: SQLiteDB) extends LemmaDBBase {
    def readLemmas(ids: List[LemmaID]):Option[List[String]] = {
      db.getLemmas(ids.map(_.toInt))
    }

    def writeLemma(id: LemmaID, lemma:String): Unit = {
      if(db.getLemma(id.toInt).nonEmpty)
        db.updateLemma(id.toInt, lemma)
      else {
        val createdId = db.createLemma()
        assert(createdId.toInt == id.toInt, s"Cannot create a new lemma with a custom ID unless that ID happens to be the next one generated by the SQLite database (requested: ${id}; created: ${createdId})")
        db.updateLemma(createdId, lemma)
      }
    }

    def createLemma():LemmaID = db.createLemma().toString

    override def remove(name: String): Unit = {
      db.deleteLemma(name.toInt)
    }

    override def deleteDatabase(): Unit = {
      db.deleteAllLemmas()
    }

    override def version(): String = db.getConfiguration("version").config("version")
  }

  def SQLiteLemmaDB (db: SQLiteDB) = new CachedLemmaDB(new UncachedSQLiteLemmaDB(db))

  class SQLiteDB(val dblocation: String) extends DBAbstraction {
    val sqldb: SQLiteDriver.backend.DatabaseDef = Database.forURL("jdbc:sqlite:" + dblocation, driver = "org.sqlite.JDBC")
    private val uncachedLemmaDB = new UncachedSQLiteLemmaDB(this)
    private val lemmaDB = SQLiteLemmaDB(this)
    private var currentSession:Session = null
    /* Statistics on the number of SQL operations performed in this session, useful for profiling. */
    private var nUpdates = 0
    private var nInserts = 0
    private var nSelects = 0

    implicit def session:Session = {
      if (currentSession == null || currentSession.conn.isClosed) {
        currentSession = sqldb.createSession()
        /* Enable write-ahead logging for SQLite - significantly improves write performance */
        sqlu"PRAGMA journal_mode = WAL".execute(currentSession)
        /* Note: Setting synchronous = NORMAL introduces some risk of database corruption during power loss. According
         * to official documentation, that risk is less than the risk of the hard drive failing completely, but we
         * should at least be aware that the risk exists. Initial testing showed this to be about 8 times faster, so
         * it seems worth the risk. */
        sqlu"PRAGMA synchronous = NORMAL".execute(currentSession)
        sqlu"VACUUM".execute(currentSession)
      }
      currentSession
    }

    private def ensureExists(location: String): Unit = {
      if (!new java.io.File(location).exists()) {
        cleanup(location)
      }
    }
    ensureExists(DBAbstractionObj.dblocation)
    ensureExists(DBAbstractionObj.testLocation)

    /* withTransaction is not thread-safe if you reuse connections, it will raise an exception saying we're in autocommit
     * mode when we shouldn't be. So only ever call withTransaction inside a synchronized block. */
    def synchronizedTransaction[T](f: => T)(implicit session:Session): T =
      synchronized {
        session.withTransaction(f)
    }

    private[SQLite] def createLemma(): Int = {
      synchronizedTransaction({
        (Lemmas.map(_.lemma) returning Lemmas.map(_._Id.get))
          .insert(None)
      })
    }

    private[SQLite] def updateLemma(lemmaId: Int, lemma:String): Unit = {
      synchronizedTransaction({
        Lemmas.filter(_._Id === lemmaId).map(_.lemma).update(Some(lemma))
      })
    }

    private[SQLite] def getLemma(lemmaId: Int): Option[String] = {
      getLemmas(List(lemmaId)) match {
        case Some(lemmas) if lemmas.size <= 1 => lemmas.headOption
        case None => None
        case Some(l) if l.size>1 => throw new IllegalStateException("Should never get more than one lemma when asking for one lemma")
      }
    }

    /** Allow retrieving lemmas in bulk to reduce the number of database queries */
    private[SQLite] def getLemmas(lemmaIds: List[Int]): Option[List[String]] = {
      //@todo Code Review: This code should be revised to either select in SQL land from lemmaIds, or read all and filter, or read individual ones in a single transaction
      synchronizedTransaction({
        val lemmaMap = Lemmas.map{row => {
          val id = row._Id.getOrElse(throw new IllegalStateException("Did not expect lemma with null Id."))
          //Note: we allow the lemma text to be empty because of the Create / check we got ID / actually write lemma protocol assumed by CachedLemmaDB.
          //@todo Code Review: for lemmas that are in lemmaIds, assert not None, for all other lemmas, filter them out instead of converting to empty string
          val lemmaText = row.lemma.getOrElse("")
          (id, lemmaText)
        }}.list.toMap
        try {
          //@todo Code Review: check that lemmaIds really should not have "" names now
          Some(lemmaIds.map(lemmaMap(_)))
        } catch {
          case _:Exception => None
        }
      })
    }

    private[SQLite] def deleteLemma(lemmaId: Int): Unit = {
      synchronizedTransaction({
        // check that it deleted exactly one row
        val deletedEntries = Lemmas.filter(_._Id === lemmaId).delete
        assert(deletedEntries == 1, "deleting one identifier should delete one entry")
      })
    }

    private[SQLite] def deleteAllLemmas(): Unit = {
      synchronizedTransaction({
        Lemmas.delete
      })
    }

    override def syncDatabase():Unit = {
      sqlu"PRAGMA wal_checkpoint(FULL)".execute(session)
    }


    // Configuration and database setup and initialization and all DB communication

    override def getAllConfigurations: Set[ConfigurationPOJO] =
      synchronizedTransaction({
        nSelects = nSelects + 1
        Config.list.filter(_.configname.isDefined).map(_.configname.get).map(getConfiguration).toSet
      })

    private def blankOk(x: Option[String]): String = x match {
      case Some(y) => y
      case None => ""
    }

    override def getModelList(userId: String): List[ModelPOJO] = {
      synchronizedTransaction({
        nSelects = nSelects + 1
        Models.filter(_.userid === userId).list.map(element => new ModelPOJO(element._Id.get, element.userid.get,
          element.name.get, blankOk(element.date), blankOk(element.filecontents),
          blankOk(element.description), blankOk(element.publink), blankOk(element.title), element.tactic,
          getNumProofs(element._Id.get), element.istemporary.getOrElse(0) == 1))
      })
    }

    private def getNumProofs(modelId: Int): Int = {
      Proofs.filter(_.modelid === modelId).length.run
    }

    private def configWithDefault(config: String, subconfig: String, default: Int): Int = {
      try {
        getConfiguration(config).config(subconfig).toInt
      } catch {case (_: NoSuchElementException) =>
        default
      }
    }
    override def createUser(username: String, password: String, mode: String): Unit = {
      /* Store passwords as a salted hash. Allow configuring number of iterations
       * since we may conceivably want to change it after deployment for performance reasons */
      val iterations = configWithDefault("security", "passwordHashIterations", 10000)
      val saltLength = configWithDefault("security", "passwordSaltLength", 512)
      val (hash, salt) = Password.generateKey(password, iterations, saltLength)
      synchronizedTransaction({
        Users.map(u => (u.email.get, u.hash.get, u.salt.get, u.iterations.get, u.level.get))
          .insert((username, hash, salt, iterations, Integer.parseInt(mode)))
        nInserts = nInserts + 1
      })}

    override def getUser(username: String): UserPOJO = synchronizedTransaction({
      nSelects = nSelects + 1
      val users =
        Users.filter(_.email === username)
          .list
          .map(m => new UserPOJO(m.email.get, m.level.get))
      if (users.length < 1) throw new Exception("getUser type should be an Option")
      else if (users.length == 1) users.head
      else throw new Exception("Primary keys aren't unique in models table.")
    })

    /**
      * Poorly named -- either update the config, or else insert an existing key.
      * But in Mongo it was just update, because of the nested documents thing.
      *
      * @param config The new configuration.
      */
    override def updateConfiguration(config: ConfigurationPOJO): Unit =
      synchronizedTransaction({
        config.config.foreach(kvp => {
          val key = kvp._1
          val value = kvp._2
          nSelects = nSelects + 1
          val configExists = Config.filter(c => c.configname === config.name && c.key === key).list.nonEmpty

          if (configExists) {
            val q = for {l <- Config if l.configname === config.name && l.key === key} yield l.value
            q.update(Some(value))
            nUpdates = nUpdates + 1
          }
          else {
            Config.map(c => (c.configname.get, c.key.get, c.value.get))
              .insert((config.name, key, value))
            nInserts = nInserts + 1
          }
        })
      })

    val proofClosedQuery = Compiled((proofId: Column[Int]) =>
      Proofs.filter(p => p._Id === proofId && p.closed.getOrElse(0) === 1).exists)
    override def isProofClosed(proofId: Int): Boolean = synchronizedTransaction({
      proofClosedQuery(proofId).run
    })

    //Proofs and Proof Nodes
    override def getProofInfo(proofId: Int): ProofPOJO =
      synchronizedTransaction({
        val stepCount = nSteps(proofId)
        nSelects = nSelects + 1
        val list = Proofs.filter(_._Id === proofId)
          .list
          .map(p => new ProofPOJO(p._Id.get, p.modelid, blankOk(p.name), blankOk(p.description),
            blankOk(p.date), stepCount, p.closed.getOrElse(0) == 1, p.lemmaid, p.istemporary.getOrElse(0) == 1))
        if (list.length > 1) throw new Exception("Duplicate proof " + proofId)
        else if (list.isEmpty) throw new Exception("Proof not found: " + proofId)
        else list.head
      })

    // Users
    override def userExists(username: String): Boolean =
      synchronizedTransaction({
        nSelects = nSelects + 1
        Users.filter(_.email === username).list.nonEmpty
      })


    override def getProofsForUser(userId: String): List[(ProofPOJO, String)] =
      synchronizedTransaction({
        val models = getModelList(userId)

        models.flatMap(model => {
          val modelName = model.name
          val proofs = getProofsForModel(model.modelId)
          proofs.map((_, modelName))
        })
      })

    override def checkPassword(username: String, password: String): Boolean =
      synchronizedTransaction({
        nSelects = nSelects + 1
        Users.filter(_.email === username).list.exists({row =>
          val hash = Password.hash(password.toCharArray, row.salt.get.getBytes("UTF-8"), row.iterations.get)
          Password.hashEquals(hash, row.hash.get)
        })
      })

    override def updateProofInfo(proof: ProofPOJO): Unit =
      synchronizedTransaction({
        nSelects = nSelects + 1
        Proofs.filter(_._Id === proof.proofId).update(proofPojoToRow(proof))
        nUpdates = nUpdates + 1
      })

    private def proofPojoToRow(p: ProofPOJO): ProofsRow =
      ProofsRow(_Id = Some(p.proofId), modelid = p.modelId, name = Some(p.name),
        description = Some(p.description), date =Some(p.date), closed = Some(if (p.closed) 1 else 0),
        lemmaid = p.provableId, istemporary = Some(if (p.temporary) 1 else 0)
      )

    private def sqliteBoolToBoolean(x: Int) = if (x == 0) false else if (x == 1) true else throw new Exception()

    //returns id of create object
    override def getProofsForModel(modelId: Int): List[ProofPOJO] =
      synchronizedTransaction({
        nSelects = nSelects + 1
        Proofs.filter(_.modelid === modelId).list.map(p => {
          val stepCount = nSteps(p._Id.get)
          val closed: Boolean = sqliteBoolToBoolean(p.closed.getOrElse(0))
          val temporary: Boolean = sqliteBoolToBoolean(p.istemporary.getOrElse(0))
          new ProofPOJO(p._Id.get, p.modelid, blankOk(p.name), blankOk(p.description), blankOk(p.date), stepCount,
            closed, p.lemmaid, temporary)
        })
      })

    def deleteExecution(executionId: Int): Boolean = synchronizedTransaction({
      val deletedExecutionSteps = Executionsteps.filter(_.executionid === executionId).delete == 1
      val deletedExecution = Tacticexecutions.filter(_._Id === executionId).delete == 1
      deletedExecutionSteps && deletedExecution
    })

    override def deleteProof(proofId: Int): Boolean = synchronizedTransaction({
      Tacticexecutions.filter(x => x.proofid === proofId).foreach(f => deleteExecution(f._Id.get))
      Proofs.filter(x => x._Id === proofId).delete == 1
    })

    //Models
    override def createModel(userId: String, name: String, fileContents: String, date: String,
                             description: Option[String] = None, publink: Option[String] = None,
                             title: Option[String] = None, tactic: Option[String] = None): Option[Int] =
      synchronizedTransaction({
        nSelects = nSelects + 1
        if (Models.filter(_.userid === userId).filter(_.name === name).list.isEmpty) {
          nInserts = nInserts + 1
          Some((Models.map(m => (m.userid.get, m.name.get, m.filecontents.get, m.date.get, m.description, m.publink, m.title, m.tactic))
            returning Models.map(_._Id.get))
            .insert(userId, name, fileContents, date, description, publink, title, tactic))
        }
        else None
      })

    override def updateModel(modelId: Int, name: String, title: Option[String], description: Option[String]): Unit = synchronizedTransaction({
      Models.filter(_._Id === modelId).map(m => (m.name, m.title, m.description)).update(Some(name), title, description)
      nUpdates = nUpdates + 1

    })

    override def addModelTactic(modelId: String, fileContents: String): Option[Int] =
      synchronizedTransaction({
        nSelects = nSelects + 1
        val mId = Integer.parseInt(modelId)
        if (Models.filter(_._Id === mId).filter(_.tactic.isEmpty).list.isEmpty) {
          Some(Models.filter(_._Id === mId).map(_.tactic).update(Some(fileContents)))
        }
        else None
      })

    override def createProofForModel(modelId: Int, name: String, description: String, date: String): Int =
      synchronizedTransaction({
        nInserts = nInserts + 2
        val model = getModel(modelId)
        val provable = ProvableSig.startProof(KeYmaeraXProblemParser(model.keyFile))
        val provableId = createProvable(provable)
        val proofId =
          (Proofs.map(p => ( p.modelid.get, p.name.get, p.description.get, p.date.get, p.closed.get, p.lemmaid.get,
                             p.istemporary.get))
            returning Proofs.map(_._Id.get))
            .insert(modelId, name, description, date, 0, provableId, 0)
        Tacticexecutions.map(te => te.proofid.get).insert(proofId)
        proofId
      })

    override def createProof(provable: ProvableSig): Int = synchronizedTransaction({
      nInserts = nInserts + 3
      val provableId = createProvable(provable)
      val proofId =
        (Proofs.map(p => ( p.closed.get, p.lemmaid.get, p.istemporary.get))
          returning Proofs.map(_._Id.get))
          .insert(0, provableId, 1)
      Tacticexecutions.map(te => te.proofid.get).insert(proofId)
      proofId
    })

    override def getModel(modelId: Int): ModelPOJO =
      synchronizedTransaction({
        nSelects = nSelects + 1
        val models =
          Models.filter(_._Id === modelId)
            .list
            .map(m => new ModelPOJO(
              m._Id.get, m.userid.get, blankOk(m.name), blankOk(m.date), m.filecontents.get, blankOk(m.description),
              blankOk(m.publink), blankOk(m.title), m.tactic, getNumProofs(m._Id.get), m.istemporary.getOrElse(0) == 1
            ))
        if (models.length < 1) throw new Exception("getModel type should be an Option")
        else if (models.length == 1) models.head
        else throw new Exception("Primary keys aren't unique in models table.")
      })

    override def deleteModel(modelId: Int): Boolean =
      synchronizedTransaction({
        Models.filter(_._Id === modelId).delete
        Proofs.filter(_.modelid === modelId).list.map(prf => deleteProof(prf._Id.get))
        true
      })

    override def getConfiguration(configName: String): ConfigurationPOJO =
      synchronizedTransaction({
        nSelects = nSelects + 1
        val kvp = Config.filter(_.configname === configName)
          .filter(_.key.isDefined)
          .list
          .map(conf => (conf.key.get, blankOk(conf.value)))
          .toMap
        new ConfigurationPOJO(configName, kvp)
      })

    /**
      * Initializes a new database.
      */
    override def cleanup (): Unit = { cleanup(DBAbstractionObj.dblocation)}
    def cleanup(which: String): Unit = {
      val dbFile = this.getClass.getResourceAsStream("/keymaerax.sqlite")
      val target = new java.io.File(which)
      val targetStream = new FileOutputStream(target)
      targetStream.getChannel.transferFrom(Channels.newChannel(dbFile), 0, Long.MaxValue)
      targetStream.close()
      dbFile.close()
    }

    /** Creates a new execution and returns the new ID in tacticExecutions */
    override def createExecution(proofId: Int): Int =
      synchronizedTransaction({
        val executionId =
          (Tacticexecutions.map(te => te.proofid.get)
            returning Tacticexecutions.map(_._Id.get))
            .insert(proofId)
        nInserts = nInserts + 1
        executionId
      })

    /** Deletes a provable and all associated sequents / formulas */
    override def deleteProvable(provableId: Int): Boolean = ???

    /**
      * Adds an execution step to an existing execution
      *
      * @note Implementations should enforce additional invarants -- never insert when branches or alt orderings overlap.
      */
    override def addExecutionStep(step: ExecutionStepPOJO): Int = {
      val (branchOrder:Int, branchLabel) = (step.branchOrder, step.branchLabel) match {
        case (None, None) => (null, null)
        case (Some(order), None) => (order, null)
        case (None, Some(label)) => (null, label)
        case (Some(order), Some(label)) =>
          throw new Exception("execution steps cannot have both a branchOrder and a branchLabel")
      }
      synchronizedTransaction({
        val status = ExecutionStepStatus.toString(step.status)
        val steps =
          Executionsteps.map(dbstep => (dbstep.executionid.get, dbstep.previousstep, dbstep.parentstep,
            dbstep.branchorder.get, dbstep.branchlabel.get, dbstep.alternativeorder.get, dbstep.status.get, dbstep.executableid.get,
            dbstep.inputprovableid, dbstep.resultprovableid, dbstep.localprovableid, dbstep.userexecuted.get, dbstep.childrenrecorded.get,
            dbstep.rulename.get)
          ) returning Executionsteps.map(_._Id.get)
        val stepId = steps
            .insert((step.executionId, step.previousStep, step.parentStep, branchOrder, branchLabel,
              step.alternativeOrder, status, step.executableId, step.inputProvableId, step.resultProvableId,
              step.localProvableId, step.userExecuted.toString, false.toString, step.ruleName))
        nInserts = nInserts + 1
        stepId
      })
    }

    override def addAlternative(alternativeTo: Int, inputProvable: ProvableSig, trace:ExecutionTrace):Unit = {
      def get(stepId: Int) = {
        Executionsteps.filter(_._Id === stepId).list match {
          case Nil => throw new Exception("Execution step not found")
          case step :: _ => step
        }
      }
      val oldStep = get(alternativeTo)
      def addSteps(prev: Option[Int], globalProvable:ProvableSig, steps:List[ExecutionStep]): Unit = {
        if (steps.nonEmpty) {
          val thisStep = steps.head
          val thisPOJO = get(thisStep.stepId)
          val localProvable = getProvable(thisPOJO.localprovableid.get).provable
          val outputProvable = globalProvable(localProvable, thisStep.branch)
          val newStep = ExecutionStepPOJO(None, oldStep.executionid.get, prev, None, Some(thisStep.branch),
            None, oldStep.alternativeorder.get + 1, ExecutionStepStatus.fromString(thisPOJO.status.get), thisPOJO.executableid.get,
            None, None, thisPOJO.localprovableid, thisPOJO.userexecuted.get.toBoolean, thisPOJO.rulename.get)
          val newId = addExecutionStep(newStep)
          addSteps(Some(newId), outputProvable, steps.tail)
        }
      }
      if(trace.steps.isEmpty) {
        // Insert a null tactic with a higher alternative order
        val nilExecutable = addBelleExpr(TactixLibrary.nil)
        val localConclusion = inputProvable.subgoals(0)
        // Generate a no-op local provable whose conclusion matches with the current state of the proof.
        val localProvable = ProvableSig.startProof(localConclusion)
        val newLocalProvableID = createProvable(localProvable)
        val step = ExecutionStepPOJO(None, oldStep.executionid.get, oldStep.previousstep, None, Some(0), None,
          oldStep.alternativeorder.get + 1, ExecutionStepStatus.Finished, nilExecutable, oldStep.inputprovableid,
          oldStep.inputprovableid, Some(newLocalProvableID), userExecuted=false, "nil")
        addExecutionStep(step)
      } else {
        addSteps(oldStep.previousstep, inputProvable, trace.steps)
      }
    }

    /** Adds a Bellerophon expression as an executable and returns the new executableId */
    override def addBelleExpr(expr: BelleExpr): Int =
      synchronizedTransaction({
        val executableId =
          (Executables.map(_.belleexpr)
            returning Executables.map(_._Id.get))
          .insert(Some(BellePrettyPrinter(expr)))
        nInserts = nInserts + 1
        executableId
      })

    /** Stores a Provable in the database and returns its ID */
    override def createProvable(p: ProvableSig): Int = {
      synchronizedTransaction({
        val lemma = Lemma(p, Lemma.requiredEvidence(p, List(ToolEvidence(List("input" -> p.prettyString, "output" -> "true")))))
        lemmaDB.add(lemma).toInt
      })
    }

    /** Returns the executable with ID executableId */
    override def getExecutable(executableId: Int): ExecutablePOJO = {
      getExecutables(List(executableId)).head
    }

    /** Allow retrieving executables in bulk to reduce the number of database queries. */
    def getExecutables(executableIds: List[Int]): List[ExecutablePOJO] =
      synchronizedTransaction({
        nSelects = nSelects + 1
        val q = for {
          exe <- Executables
          if exe._Id inSetBind executableIds
        } yield (exe._Id.get, exe.belleexpr.get)
        val executableMap = q.run.map(exe => (exe._1, ExecutablePOJO(exe._1, exe._2))).toMap
        try {
          executableIds.map(executableMap)
        } catch {
          case _:Exception => throw new ProverException("getExecutable type should be an Option")
        }
      })

    /** Use escape hatch in prover core to create a new Provable */
    override def getProvable(lemmaId: Int): ProvablePOJO = {
      loadProvables(List(lemmaId)).head
    }

    def loadProvables(lemmaIds: List[Int]): List[ProvablePOJO] = {
      lemmaDB.get(lemmaIds.map(_.toString)) match {
        case None => throw new Exception (" No lemma for one of these IDs: " + lemmaIds)
        case Some(lemmas) => lemmas.zipWithIndex.map{case (lemma, id) => ProvablePOJO(id, lemma.fact)}
      }
    }

    /** Rerun all execution steps to generate a provable for the current state of the proof
      * Assumes the execution starts with a trivial provable (one subgoal, which is the same
      * as the conclusion)
      *
      * This is only for testing purposes. If you need the last provable of an execution,trace,
      * you should use getExecutionTrace(id).lastProvable
      * */
    private def regenerate(proofId: Int): ProvableSig = {
      val trace = getExecutionTrace(proofId)
      val inputProvable = ProvableSig.startProof(trace.conclusion)
      val initialProvable = ProvableSig.startProof(inputProvable.conclusion)
      def run(p: ProvableSig, t:BelleExpr): ProvableSig =
        SequentialInterpreter(Nil)(t,BelleProvable(p)) match {
          case BelleProvable(pr, _) => pr
        }
      def loadTactic(id: Int): BelleExpr = BelleParser(getExecutable(id).belleExpr)
      trace.steps.foldLeft(initialProvable)({case (provable, currStep) =>
          run(provable, loadTactic(currStep.executableId))
        })
      initialProvable
    }

    private def nSteps(proofId: Int): Int = {
      getTacticExecution(proofId) match {
        case Some(execution) => proofSteps(execution).size
        case None => 0
      }
    }

    override def addAgendaItem(proofId: Int, initialProofNode: Int, displayName:String): Int = synchronizedTransaction({
      (Agendaitems.map(item => (item.proofid.get, item.initialproofnode.get, item.displayname.get))
        returning Agendaitems.map(_._Id.get))
        .insert(proofId, initialProofNode, displayName)
    })

    override def updateAgendaItem(item:AgendaItemPOJO): Unit = synchronizedTransaction({
      Agendaitems.filter(_._Id === item.itemId)
        .map(dbitem => (dbitem.proofid.get, dbitem.initialproofnode.get, dbitem.displayname.get))
        .update((item.proofId, item.initialProofNode, item.displayName))
    })

    override def agendaItemsForProof(proofId: Int): List[AgendaItemPOJO] = {
      synchronizedTransaction({
        Agendaitems.filter(_.proofid === proofId)
        .list
        .map(item => AgendaItemPOJO(item._Id.get, item.proofid.get, item.initialproofnode.get, item.displayname.get))
      })
    }

    override def getAgendaItem(proofId: Int, initialProofNode: Int): Option[AgendaItemPOJO] = {
      synchronizedTransaction({
        Agendaitems.filter{row => row.proofid === proofId && row.initialproofnode === initialProofNode}
          .list
          .map(item => AgendaItemPOJO(item._Id.get, item.proofid.get, item.initialproofnode.get, item.displayname.get))
          .headOption
      })
    }

    /** Updates an executable step */
    override def updateExecutionStep(executionStepId: Int, step: ExecutionStepPOJO): Unit = {
      synchronizedTransaction({
        nSelects = nSelects + 1
        nUpdates = nUpdates + 1
        Executionsteps.filter(_._Id === executionStepId)
        .map(dbstep => (dbstep.executionid.get, dbstep.previousstep, dbstep.parentstep,
          dbstep.branchorder, dbstep.branchlabel, dbstep.alternativeorder.get, dbstep.status.get, dbstep.executableid.get,
          dbstep.inputprovableid, dbstep.resultprovableid, dbstep.localprovableid, dbstep.userexecuted.get, dbstep.childrenrecorded.get,
          dbstep.rulename.get)
        )
        .update((step.executionId, step.previousStep, step.parentStep, step.branchOrder, step.branchLabel,
          step.alternativeOrder, ExecutionStepStatus.toString(step.status), step.executableId, step.inputProvableId, step.resultProvableId,
          step.localProvableId, step.userExecuted.toString, false.toString, step.ruleName))
      })
    }

    def printStats(): Unit = {
      println("Updates: " + nUpdates + " Inserts: " + nInserts + " Selects: " + nSelects)
    }

    val executionStepsQuery = Compiled((executionId: Column[Int]) =>
      Executionsteps.filter(row => row.executionid === executionId &&
        row.status === ExecutionStepStatus.toString(ExecutionStepStatus.Finished)).sortBy(_.alternativeorder.desc))

    def proofSteps(executionId: Int): List[ExecutionStepPOJO] = {
      synchronizedTransaction({
        /* The Executionsteps table may contain many alternate histories for the same execution. In order to reconstruct
         * the current state of the world, we must pick the most recent alternative at every opportunity.*/
        var steps = executionStepsQuery(executionId).run
        var prevId: Option[Int] = None
        var revResult: List[ExecutionStepPOJO] = Nil
        while(steps != Nil) {
          val (headSteps, tailSteps) = steps.partition(_.previousstep == prevId)
          if (headSteps == Nil)
            return revResult.reverse
          val head = headSteps.head
          revResult =
            ExecutionStepPOJO(head._Id, head.executionid.get, head.previousstep, head.parentstep,
              head.branchorder, head.branchlabel, head.alternativeorder.get, ExecutionStepStatus.fromString(head.status.get),
              head.executableid.get, head.inputprovableid, head.resultprovableid, head.localprovableid, head.userexecuted.get.toBoolean,
              head.rulename.get)::revResult
          prevId = head._Id
          steps = tailSteps
        }
        revResult.reverse
      })
    }

    private def getProofConclusion(proofId: Int): Sequent = {
      val proofInfo = getProofInfo(proofId)
      proofInfo.modelId match {
        case Some(modelId) =>
          val model = getModel(modelId)
          KeYmaeraXProblemParser.parseAsProblemOrFormula(model.keyFile) match {
            case fml: Formula =>
              val sequent = Sequent(collection.immutable.IndexedSeq(), collection.immutable.IndexedSeq(fml))
              proofInfo.provableId match {
                case Some(pid) =>
                  val conclusion = getProvable(pid).provable.conclusion
                  assert(conclusion == sequent,
                    s"Model formula and associated provable's conclusion must match\nFormula:  $fml\nProvable: ${conclusion.succ.head}")
                  sequent
                case None => sequent
              }
            case _ => throw new Exception("Failed to parse model for proof " + proofId + " model " + modelId)
          }
        case None => proofInfo.provableId match {
          case Some(pid) => getProvable(pid).provable.conclusion
          case None => throw new Exception("Require either model or provable, but got neither")
        }
      }
    }

    private def getTacticExecution(proofId: Int): Option[Int] =
      synchronizedTransaction({
          val executionIds =
            Tacticexecutions.filter(_.proofid === proofId)
              .list
              .map(_._Id.get)
          if (executionIds.length < 1) None
          else if (executionIds.length == 1) Some(executionIds.head)
          else throw new Exception("Primary keys aren't unique in executions table.")
        })

    private def zipTrace(executionSteps: List[ExecutionStepPOJO], executables: List[ExecutablePOJO], inputProvable:ProvableSig, localProvables: List[ProvableSig]): List[ExecutionStep] = {
      (executionSteps, executables, localProvables) match {
        case (step::steps, exe:: exes, localProvable::moreProvables) =>
          val output = inputProvable(localProvable, step.branchOrder.get)
          ExecutionStep(step.stepId.get, step.executionId, inputProvable, Some(localProvable), step.branchOrder.get, step.alternativeOrder, step.ruleName, step.executableId, step.userExecuted)  ::
            zipTrace(steps, exes, output, moreProvables)
        case (Nil, Nil, Nil) => Nil
        case _ => throw new ProverException("Bug in zipTrace")
      }
    }

    override def getExecutionSteps(executionId: Int): List[ExecutionStepPOJO] = proofSteps(executionId)

    override def getExecutionTrace(proofId: Int): ExecutionTrace = {
      /* This method has proven itself to be a resource hog, so this implementation attempts to minimize the number of
         DB calls. */
      getTacticExecution(proofId) match {
        case Some(executionId) =>
          val steps = proofSteps(executionId)
          if (steps.isEmpty) {
            val conclusion = getProofConclusion(proofId)
            ExecutionTrace(proofId.toString, executionId.toString, conclusion, Nil)
          } else {
            val provableIds = steps.map(_.localProvableId.get)
            val executableIds = steps.map(_.executableId)
            val provables = loadProvables(provableIds).map(_.provable)
            val conclusion = provables.head.conclusion
            val initProvable = ProvableSig.startProof(conclusion)
            val executables = getExecutables(executableIds)
            val traceSteps = zipTrace(steps, executables, initProvable, provables)
            ExecutionTrace(proofId.toString, executionId.toString, conclusion, traceSteps)
          }
        case None =>
          val conclusion = getProofConclusion(proofId)
          //@todo is execution ID really unused so far?
          ExecutionTrace(proofId.toString, null, conclusion, Nil)
      }
    }

    override def getInvariants(modelId: Int): Map[Expression, Formula] = {
      val model = getModel(modelId)
      var invariants: Map[Expression, Formula] = Map.empty
      KeYmaeraXParser.setAnnotationListener{case (program, formula) =>
        invariants = invariants.+((program, formula))
      }
      KeYmaeraXProblemParser.parseAsProblemOrFormula(model.keyFile)
      invariants
    }

  }
}