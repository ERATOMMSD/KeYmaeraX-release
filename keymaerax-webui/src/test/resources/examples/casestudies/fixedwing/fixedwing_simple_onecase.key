Functions.
  R g.      /* gravity */
  R ep.     /* time limit for control decisions */
  R B.      /* minimum braking capability of the aircraft */
  R A.      /* maximum acceleration -B <= a <= A */
  R W.      /* maximum roll rate of -W <= a <= W */
  R Theta.  /* maximum roll angle */
  R Vmin.   /* minimum cruising speed */
  R abs(R). /* predefined function of absolute value */
  R tanTheta. /* value of tan(Theta) */
End.

ProgramVariables.
  R xo.     /* obstacle position: xo */
  R yo.     /* obstacle position: yo */
  R x.      /* aircraft position: x */
  R y.      /* aircraft position: y */
  R v.      /* aircraft velocity in x-y plane */
  R t.      /* time */
  R a.      /* aircraft acceleration in x-y plane */
  R dx.     /* aircraft orientation: x component of heading psi // dx = cos(psi) */
  R dy.     /* aircraft orientation: y component of heading psi // dy = sin(psi) */
  R dz.     /* aircraft orientation: z component of roll angle theta // dz = cos(theta) */
  R dxy.    /* aircraft orientation: x-y plane component of roll angle theta // dxy = sin(theta) */
  R theta.  /* roll angle */
  R w.      /* roll rate */
End.

Problem.
  dx^2+dy^2 = 1
  & dz^2+dxy^2 = 1
  & g > 0
  & A >= 0
  & B > 0
  & W > 0
  & Theta > 0
  & theta <= Theta
  & theta >= -Theta
  & tanTheta > 0
  & Vmin > 0
  & v >= Vmin
  & ep > 0
  & S >= (v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta)
  & (abs(x-xo) >=(v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta)
    | abs(y-yo) >= (v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta))
  ->
  [
  {
    {
      {
        /* make a circle */
        {
          {
          /* control the acceleration */
          {{ ?v = Vmin; a := 0; }
          ++
          { ?v >= Vmin; a := -B; }};

          /* control the roll angle */
          /* follow a circle */
          {{ ?abs(theta) = Theta; w :=0; }
          ++
          /* or turn right to circle */
          { ?0 <= theta & theta < Theta; w := W; }
          ++
          /* or turn left to circle */
          { ?-Theta < theta & theta < 0; w := -W; }}
          };
          ?(S >= (v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta)
             & (abs(x-xo) >= (v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta)
               | abs(y-yo) >= (v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta)));
        }
        ++
        /* or choose a new safe curve */
        { a :=*; ?-B <= a & a <= A;
          w :=*; ?-W <= w & w <= W;
          v :=*; ?v>=Vmin;
          theta :=*; ?-Theta <= theta & theta <= Theta;
          /* for the chosen a, w, v, theta: worst case position of obstacles wrt. curve  */
          xo :=*;
          yo :=*;
          /* use that curve, if it is a safe one (admissible velocities) */
          ?(S >= (v^2-Vmin^2)/(2*B) + (A/B+1)*(A/2*ep^2+ep*v) + 2*(Vmin^2)/(g*tanTheta)
             & (abs(x-xo) >= (v^2-Vmin^2)/(2*B) + (A/B+1)*(A/2*ep^2+ep*v) + 2*(Vmin^2)/(g*tanTheta)
               | abs(y-yo) >= (v^2-Vmin^2)/(2*B) + (A/B+1)*(A/2*ep^2+ep*v) + 2*(Vmin^2)/(g*tanTheta)));
        }
      };
      /* reset time */
      t := 0;
    }
    /* dynamics */
    { x' = v * dx,
      y' = v * dy,
      dx' = -dy * (g/v) * (dxy/dz),
      dy' = dx * (g/v) * (dxy/dz),
      dz' = -dxy * w,
      dxy' = dz * w,
      v' = a,
      theta' = w,
      t' = 1 & t <= ep & v >= Vmin & -Theta <= theta & theta <= Theta
    }
    /*@invariant(
      t>=0,
      dx^2+dy^2 = 1,
      dz^2+dxy^2 = 1,
      v = old(v)+a*t,
      theta = old(theta)+w*t,
      x-old(x) <= t*(v-a/2*t)+2*(Vmin^2)/(g*tanTheta) & x-old(x) >= -t*(v-a/2*t)-2*(Vmin^2)/(g*tanTheta),
      y-old(y) <= t*(v-a/2*t)+2*(Vmin^2)/(g*tanTheta) & y-old(y) >= -t*(v-a/2*t)-2*(Vmin^2)/(g*tanTheta)
    )*/
  }* /*@invariant(
      dx^2+dy^2 = 1
      & dz^2+dxy^2 = 1
      & v>=Vmin
      & theta <= Theta
      & theta >= -Theta
      & S >= (v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta)
      & (abs(x-xo) >= (v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta)
        | abs(y-yo) >= (v^2-Vmin^2)/(2*B) + 2*(Vmin^2)/(g*tanTheta))
    )*/
  ] (x - xo)^2 + (y - yo)^2 > 0
End.
