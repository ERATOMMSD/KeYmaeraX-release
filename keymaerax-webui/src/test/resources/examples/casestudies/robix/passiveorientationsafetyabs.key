Functions.
	R ep.			 		/* time limit for control decisions */
 	R b.					/* minimum braking capability of the robot */
	R A.					/* maximum acceleration -b() <= a <= A */
	R Om.					/* max. rotational velocity for dynamic window */
	R V. 				  /* Maximum velocity of obstacle */
	R gamma. 			/* Sensor range  in radian*/
	R abs(R).
End.

ProgramVariables.
	R x.		/* robot position: x */
	R y.		/* robot position: y */
	R v.		/* robot translational velocity */
	R a.		/* robot translational acceleration */
	R w.		/* robot rotational velocity */
	R dx. 		/* robot orientation: x */
	R dy. 		/* robot orientation: y */
	R r.		/* curve radius */
	R t.		/* clock variable */
	R ox. 				/* position summary of obstacle */
  R oy.
  R odx. 				/* direction and linear velocity of obstacle */
  R ody.
	R isVisible. /* Indicates whether or not the obstacle is visible for the robot (>=0) when it makes its decision. */
	R beta. /* Angle that the robot traveled since he last chose a new curve */
End.

Problem.
	  v >= 0
	& V >= 0
	& ( abs(x-ox) > v^2/(2*b) + V*(v/b)
    | abs(y-oy) > v^2/(2*b) + V*(v/b))
 	& v^2/(2*b*abs(r)) < gamma
 	& beta = 0
 	& r != 0
	& dx^2 + dy^2 = 1
	& A >= 0
	& b > 0
	& ep > 0
	& gamma > 0 /* implied by conditions above, just to be sure */
      -> [
      {
          {
           /* control obstacle */
           odx :=*;
           ody :=*;
           ?odx^2+ody^2 <= V^2;

           /* control robot */
           {
           /* brake on current curve. If the velocity is zero this just means that the robot remains stopped */
           {a := -b;}
        ++ /* When we are stopped, both translational and rotational acceleration are 0 */
           {?v=0; a := 0; w := 0;}
        ++ /* or choose a new safe curve */
				   {a := A;
            r :=*; ?r!=0;

            /* measure obstacle position and whether or not it is visible to the robot */
            ox :=*; oy :=*; isVisible :=*;
            ?(isVisible < 0 | abs(x-ox) > v^2/(2*b) + V*(v/b) + (A/b + 1) * (A/2 * ep^2 + ep*(v+V))
                            | abs(y-oy) > v^2/(2*b) + V*(v/b) + (A/b + 1) * (A/2 * ep^2 + ep*(v+V)) );
            ?(v^2/(2*b) + (A/b + 1) * (A/2 * ep^2 + ep*v) < gamma*abs(r));
						beta := 0;
				    }
				    }

				/* Reset the clocks */
				t := 0;
				/* Set w according to physics (rigid body motion) */
				w :=*; ?w*r = v;
				}

				{x' = v * dx, y' = v * dy, dx' = -w * dy, dy' = w * dx, v' = a, w' = a/r, beta'=w,
        							ox' = odx, oy' = ody, t' = 1 & (t <= ep & v >= 0)}
			}*
		] (v = 0 | (x - ox)^2 + (y - oy)^2 > 0 | (isVisible < 0 & (abs(beta) < gamma)) )
End.

