package edu.cmu.cs.ls.keymaerax.btactics

import edu.cmu.cs.ls.keymaerax.core._
import edu.cmu.cs.ls.keymaerax.btactics.TacticTestBase
import edu.cmu.cs.ls.keymaerax.btactics.coasterx.CoasterXParser.File
import edu.cmu.cs.ls.keymaerax.btactics.coasterx.{CoasterXParser, CoasterXProver, CoasterXSpec}
import edu.cmu.cs.ls.keymaerax.parser.{KeYmaeraXPrettyPrinter, KeYmaeraXPrinter}
import edu.cmu.cs.ls.keymaerax.parser.StringConverter._
import edu.cmu.cs.ls.keymaerax.tags.SlowTest

@SlowTest
class CoasterXTests extends TacticTestBase {
  val exampleFile1:String = "([(40, 100), \n  (800, 100), \n  (1003, 292), \n  (1014.0703641303933, 490.6092116668379), \n  (1037.047741675357, 512.3415096403996),\n  (1060, 491), \n  (1074.5057163758297, 291.8183498791612), \n  (1198, 111)], \n [('straight', (None,), None), \n  ('straight', ((40, 500, 800, 500),), 0.0),\n  ('arc', ((596.6848958333333, 93.36979166666652, 1003.3151041666667, 500.0), -90.0, 86.80966720837762), 17.940621403912424), \n  ('straight', ((1003, 308, 1014.0703641303933, 109.3907883331621),), 17.940621403912424), \n  ('arc', ((1014.0346977885041, 87.6584903596004, 1060.0607855622097, 133.68457813330605), 176.80966720837756, -86.80966720837756), 0), \n  ('arc', ((1014.0346977885041, 87.6584903596004, 1060.0607855622097, 133.68457813330605), 90, -85.8346983689234), -13.7312522153492), \n  ('straight', ((1060, 109, 1074.5057163758297, 308.1816501208388),), -13.7312522153492), \n  ('arc', ((1073.9302486950965, 74.48837803692527, 1509.6673714837575, 510.2255008255863), -175.83469836892337, 60.33353966713379), -0.4770003569825235)], \n165, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"
  val exampleFile1Shrunk:String = "([(40,100),(800,100),(1003,292),(1014.0703641303933,490.6092116668379),(1037.047741675357,512.3415096403996),(1074.5057163758297,291.8183498791612),(1198,111)]," +
    "[('straight',(None,),None)," +
    "('straight',((40, 500, 800, 500),), 0.0)," +
    "('arc', ((596.6848958333333, 93.36979166666652, 1003.3151041666667, 500.0), -90.0, 86.80966720837762), 17.940621403912424)," +
    "('straight', ((1003, 308, 1014.0703641303933,109.3907883331621),), 17.940621403912424)," +
    "('arc', ((1014.0346977885041, 87.6584903596004,1060.0607855622097, 133.68457813330605), 176.80966720837756, -172.644366), 0)," +
    "('straight', ((1060, 109, 1074.5057163758297, 308.1816501208388),), -13.7312522153492)," +
    "('arc', ((1073.9302486950965, 74.48837803692527, 1509.6673714837575, 510.2255008255863), -175.83469836892337, 60.33353966713379), -0.4770003569825235)]" +
    ", \n165, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"

  val joints:String = "(40,100),(800,100),(1003,292),(1014.0703641303933,490.6092116668379),(1037.047741675357,512.3415096403996),(1060,491),(1074.5057163758297,291.8183498791612),(1198,111)"
  val segments:String = "('straight',(None,),None),('straight',((40,500,800,500),),0.0),('arc',((596.6848958333333,93.36979166666652,1003.3151041666667,500.0),-90.0,86.80966720837762),17.940621403912424),('straight',((1003,308,1014.0703641303933,109.3907883331621),),17.940621403912424),('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),176.80966720837756,-86.80966720837756),0),('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),90,-85.8346983689234),-13.7312522153492),('straight',((1060,109,1074.5057163758297,308.1816501208388),),-13.7312522153492),('arc',((1073.9302486950965,74.48837803692527,1509.6673714837575,510.2255008255863),-175.83469836892337,60.33353966713379),-0.4770003569825235)"
  val full:String = "([" + joints + "], [" + segments + "], 165, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"
  val seg1:String = "('straight',(None,),None)"
  val seg2:String = "('straight',((40,500,800,500),),0.0)"
  val seg3:String = "('arc',((596.6848958333333,93.36979166666652,1003.3151041666667,500.0),-90.0,86.80966720837762),17.940621403912424)"
  val seg4:String = "('straight',((1003,308,1014.0703641303933,109.3907883331621),),17.940621403912424)"
  val seg5:String = "('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),176.80966720837756,-86.80966720837756),0)"
  val seg6:String = "('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),90,-85.8346983689234),-13.7312522153492)"
  val seg7:String = "('straight',((1060,109,1074.5057163758297,308.1816501208388),),-13.7312522153492)"
  val seg8:String = "('arc',((1073.9302486950965,74.48837803692527,1509.6673714837575,510.2255008255863),-175.83469836892337,60.33353966713379),-0.4770003569825235)"

  // More example files
  val straightLine = "([(0, 100), (1000, 100)], [('straight', (None,), None), ('straight', ((0, 500, 1000, 500),), 0.0)], 1.0, (0, 0, 0, 0))"
  val quarterArc = "([(100, 100), (171, 129)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), -90, 45.0), 1.0)], 500.0, (171, 129, 171, 129))"

  val halfArc = "([(0, 200), (100, 300)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), -180, -90.0), 0.0)], 500.0, (100, 300, 100, 300))"
  val secondHalfArc = "([(100, 300), (200, 200)], [('straight', (None,), None),  ('arc', ((0, 300.0, 200, 500), 90.0, -90), -48.494845360825195)], 500.0, (100, 300, 100, 300))"

  val fullArc = "([(0, 200), (100, 300), (200, 200)],  [('straight', (None,), None), ('arc', ((0, 300, 200, 500), -180, -90.0), 0.0),   ('arc', ((0, 300.0, 200, 500), 90.0, -90), -48.494845360825195)], 500.0, (-800, -94.31605562579006, 198.106405394016, 906.9587020648964))"
  val simpleHill = "([(0, 100),  (100, 200),  (342, 300),   (579, 202),  (683, 102)],[('straight', (None,), None), ('straight', ((0, 500, 100, 400),), 1.0), ('arc', ((0, 300, 683, 983), 135.0, -45.0), 0), ('arc', ((0, 300, 683, 983), 90, -45.0), -1), ('straight', ((579, 398, 683, 497),), -1)], 500.0, (-2406.346757107975, -29.408888352737677, 1211.9531693319414, 3588.8910380871785))"
  val simpleValley = "([(0, 500),  (100, 400),   (199, 359),   (299, 398),   (415, 505)], [('straight', (None,), None),  ('straight', ((0, 100, 100, 200),), -1.0),  ('arc', ((59, -39, 339, 241), -135, 45), 0),  ('arc', ((51, -55, 347, 241), -90,  43), 0.92), ('straight', ((299, 202, 415, 95),), 0.92)], 500.0, (415.37482499434077, 94.97095456951104, 253.3717788455165, 243.96392952765427))"

  val extremeEnv = "([(0, 100), (2, 101), (190.0, 195.0), (243.1755319148936, 207.55304027162447), (362, 93), (369, 21)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 190.0, 405.0),), 0.5), ('arc', ((124.27142781348194, 392.44695972837553, 362.0796360163053, 630.2551679311989), 116.56505117707799, -26.56505117707799), 0), ('arc', ((124.27142781348194, 392.44695972837553, 362.0796360163053, 630.2551679311989), 90, -87.90290447650786), -27.30929095354531), ('arc', ((361.59812965425056, -114.98737769620027, 1561.6589976680903, 1085.0734903176394), -177.90290447650787, 6.911751019089309), -6.307448288452398)], 100.0, (-1394.4496268182118, -169.27348755020273, 379.944306398132, 1605.1204456661412))"
  val multiSizeArcs = "([(0, 100), (2, 101), (28.3006993006993, 107.20875289074621), (83, 70), (182.35758774599904, 2.412811809333107), (289, 103), (324.03641813626166, 136.04702800800368), (359, 104), (370.6755001986353, 93.29843391528561), (382, 102)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('arc', ((-30.50945219144552, 492.7912471092538, 87.11085079284412, 610.4115500935434), 116.56505117707799, -26.56505117707799), 0), ('arc', ((-30.50945219144552, 492.7912471092538, 87.11085079284412, 610.4115500935434), 90, -68.45035227705453), -2.5322110715441895), ('arc', ((75.53291700005333, 383.9378466987755, 289.18225849194476, 597.5871881906669), -158.45035227705455, 68.45035227705455), 0), ('arc', ((75.53291700005333, 383.9378466987755, 289.18225849194476, 597.5871881906669), -90, 86.65260084752481), 17.097027736574372), ('arc', ((288.94012058994457, 463.9529719919963, 359.13271568257875, 534.1455670846306), 176.6526008475248, -86.65260084752481), 0), ('arc', ((288.94012058994457, 463.9529719919963, 359.13271568257875, 534.1455670846306), 90, -85.01568992414752), -11.466215572099545), ('arc', ((358.95568182961495, 483.2619293466737, 382.39531856765564, 506.7015660847144), -175.01568992414758, 85.01568992414758), 0), ('arc', ((358.95568182961495, 483.2619293466737, 382.39531856765564, 506.7015660847144), -90, 75.07620846792699), 3.7520057088165677)], 100.0, (-266.2447778060458, 83.41288723251023, 393.1204503929255, 742.7781154314815))"
  val q3Grows = "([(0, 100), " +
    "(2, 101), " +
    "(14.885964912280702, 104.0419636749753), " +
    "(39, 91), " +
    "(184.19804275276192, 12.470314181327467), " +
    "(326, 86)], " +
    "" +
    "[('straight', (None,), None), " +
    " ('straight', ((1, 500, 2, 499),), 0.5), " +
    " ('arc', ((-13.927928587256055, 495.9580363250247, 43.69985841181746, 553.5858233240982), 116.56505117707799, -26.56505117707799), 0), " +
    " ('arc', ((-13.927928587256055, 495.9580363250247, 43.69985841181746, 553.5858233240982), 90, -56.813065793699124), -1.528921023359289), " +
    " ('arc', ((10.700702925553315, 240.5350061642552, 357.69538257997056, 587.5296858186725), -146.81306579369914, 56.81306579369914), 0), " +
    " ('arc', ((10.700702925553315, 240.5350061642552, 357.69538257997056, 587.5296858186725), -90, 54.81689910688371), 1.418478393372417)], " +
    "100.0, (-267.56989336035264, -0.8143009990482142, 385.66846432127187, 652.4240566825763))"
  val q3Shrinks = "([(0, 100), (2, 101), (307.52459016393436, 173.1245720764523), (581, 116), (589.2496479176547, 114.27678251817991), (609, 129)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('arc', ((-375.6491622403866, 426.8754279235477, 990.6983425682554, 1793.2229327321897), 116.56505117707799, -26.56505117707799), 0), ('arc', ((-375.6491622403866, 426.8754279235477, 990.6983425682554, 1793.2229327321897), 90, -23.59702182575377), -0.43682735866348954), ('arc', ((568.6410567200143, 444.50603508653916, 609.8582391152951, 485.7232174818201), -113.5970218257537, 23.5970218257537), 0), ('arc', ((568.6410567200143, 444.50603508653916, 609.8582391152951, 485.7232174818201), -90, 73.40655944194458), 3.3558365255981495)], 100.0, (-143.95818861385715, -23.285682656397682, 625.011771298551, 745.6842772560105))"

  // Paul Gregg's backyard coaster: backyardrollercoasters.org
  val byrc = "([(0, 300), (48, 300), (105, 283), (175.24388685102164, 237.0092389468649), (240.25522994016774, 217.61989100799678), (295, 231), (345.468210287794, 243.33487972538745), (409, 223), (476.8116731825087, 201.2952404711075), (537, 218), (654, 358)], [('straight', (None,), None), ('straight', ((0, 300, 48, 300),), 0.0), ('arc', ((-56.05882352941177, 300.0, 152.05882352941177, 508.11764705882354), 90.0, -33.213961157234), -0.6547297297297296), ('straight', ((105, 317, 175.24388685102164, 362.9907610531351),), -0.6547297297297293), ('arc', ((121.57095138010632, 145.01155187188033, 358.9395085002292, 382.3801089920032), -123.21396115723401, 33.21396115723401), 0), ('arc', ((121.57095138010632, 145.01155187188033, 358.9395085002292, 382.3801089920032), -90, 27.468693066424905), 0.5198727674733773), ('arc', ((236.055327163472, 356.66512027461255, 454.88109341211606, 575.4908865232567), 117.4686930664249, -27.468693066424905), 0), ('arc', ((236.055327163472, 356.66512027461255, 454.88109341211606, 575.4908865232567), 90, -35.497044457246986), -0.7132152415639554), ('arc', ((360.0280801813959, 165.13757352666698, 593.5952661836214, 398.7047595288925), -125.497044457247, 35.497044457247), 0), ('arc', ((360.0280801813959, 165.13757352666698, 593.5952661836214, 398.7047595288925), -90, 31.02308633037154), 0.6014091564546294), ('arc', ((114.32700753034828, -135.94595914237, 672.1699780505688, 421.89701137785056), -58.976913669628466, 38.181855002047186), 2.633202651695736)], 73.80666614268354, (503.4650040047558, 136.57672657370415, 659.0682869279027, 292.18000949685097))"
  val phantomsRevenge = "([(0, 100),\n (2, 101),\n (152.0, 176.0),\n (166.60135135135133, 179.4469114822773),\n (196, 161),\n (209.53710900034494, 132.97908598453802),\n (260.50528709965545, 100.99783810312744),\n (261, 101),\n (285.99809038028985, 101.2184876337596),\n (338, 121),\n (390.20718136331936, 166.6280832280135),\n (406.433701161296, 172.71961079493371),\n (429, 158),\n (462.36693133891305, 82.23444731230279),\n (496.9694094713185, 59.66384261147164),\n (502, 60),\n (554, 74),\n (566.3646248121352, 79.11932795969688),\n (587.1806951889328, 83.25820821300124),\n (616, 75),\n (644.7911078440376, 66.74987166353401),\n (650, 67),\n (737.5365249576256, 75.42634836432774),\n (755, 81),\n (774.5725368731753, 86.22681195660812),\n (801, 76),\n (822.4260132343007, 67.7086325208196),\n (840, 73),\n (856.665140664223, 84.03591313579977),\n (867.870825037044, 87.40984272063554),\n (885, 78),\n (898.6184407714723, 56.57052089281319),\n (924.5623530423816, 42.31833802030542),\n (931, 43),\n (984.4039126336075, 54.437781847743395),\n (993.0686804694133, 55.355266580198304),\n (1018, 47),\n (1032.5602629682746, 42.120399526849155),\n (1044, 45),\n (1066.5998326600113, 50.68880985991336),\n (1085, 47),\n (1105.3622726145268, 42.917833212990786),\n (1116, 44),\n (1136.9374123847576, 48.304435442903014),\n (1146.063499874167, 49.23282441345191),\n (1169, 43),\n (1177.4988638319862, 40.69049655841138),\n (1184, 42),\n (1188.0, 42.80570743805163),\n (1192, 42)], [('straight', (None,),\n None),\n ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 152.0, 424.0),), 0.5), ('arc', ((133.95173716637134, 420.5530885177227, 199.2509655363313, 485.8523168876826), 116.56505117707799, -26.56505117707799), 0), ('arc', ((133.95173716637134, 420.5530885177227, 199.2509655363313, 485.8523168876826), 90, -64.21447121355821), -2.069933396764995), ('straight', ((196, 439, 209.53710900034494, 467.020914015462),), -2.0699333967649944), ('arc', ((203.90093869773227, 385.7934650930262, 317.1096355015786, 499.00216189687256), -154.2144712135582, 64.2144712135582), 0), ('arc', ((203.90093869773227, 385.7934650930262, 317.1096355015786, 499.00216189687256), -90, 0.5007622722822305), 0.008740172966646956), ('straight', ((261, 499, 285.99809038028985, 498.7815123662404),), 0.00874017296664644), ('arc', ((205.21268000105053, 338.6136186830504, 365.3836323987283, 498.78457108072826), -89.49923772771783, 40.65207808141596), 0.873980974197387), ('straight', ((338, 479, 390.20718136331936, 433.3719167719865),), 0.8739809741973867), ('arc', ((381.77595730702683, 427.2803892050663, 431.0914450155652, 476.5958769136047), 131.15284035369814, -41.15284035369814), 0), ('arc', ((381.77595730702683, 427.2803892050663, 431.0914450155652, 476.5958769136047), 90, -66.23144545804345), -2.2706778731953174), ('straight', ((429, 442, 462.36693133891305, 517.7655526876972),), -2.2706778731953157), ('arc', ((459.1599729921548, 464.717284430201, 534.7788459504822, 540.3361573885284), -156.23144545804348, 66.23144545804348), 0), ('arc', ((459.1599729921548, 464.717284430201, 534.7788459504822, 540.3361573885284), -90, 7.6459447296925305), 0.13424473787079694), ('arc', ((265.84134437546186, 124.99874667510247, 682.6956888979573, 541.8530911975979), -82.35405527030747, 14.845086859599391), 0.4140301899555084), ('straight', ((554, 526, 566.3646248121352, 520.8806720403031),), 0.4140301899555053), ('arc', ((532.7651180139989, 516.7417917869988, 641.5962723638667, 625.5729461368666), 112.49103158929172, -22.491031589291723), 0), ('arc', ((532.7651180139989, 516.7417917869988, 641.5962723638667, 625.5729461368666), 90, -31.979444261190096), -0.6243706142530647), ('arc', ((590.4287711704121, 424.52545498921506, 699.153444517663, 533.250128336466), -121.97944426119014, 31.97944426119014), 0), ('arc', ((590.4287711704121, 424.52545498921506, 699.153444517663, 533.250128336466), -90, 5.4984044308156115), 0.09626094214279941), ('straight', ((650, 533, 737.5365249576256, 524.5736516356723),), 0.09626094214279966), ('arc', ((690.0182667658223, 438.04662276060697, 776.7448158305294, 524.7731718253141), -84.50159556918446, 24.40525058162565), 0.5751103919643095), ('arc', ((735.3130641497801, 513.7731880433919, 813.8320095965705, 592.2921334901823), 119.90365501244118, -29.903655012441178), 0), ('arc', ((735.3130641497801, 513.7731880433919, 813.8320095965705, 592.2921334901823), 90, -42.3105508158249), -0.9102666593017646), ('arc', ((790.5964737092104, 468.6322884289997, 854.2555527593911, 532.2913674791804), -132.31055081582502, 42.310550815825025), 0), ('arc', ((790.5964737092104, 468.6322884289997, 854.2555527593911, 532.2913674791804), -90, 33.513140105834054), 0.6622154206889976), ('straight', ((840, 527, 856.665140664223, 515.9640868642002),), 0.6622154206889975), ('arc', ((847.5753861929372, 512.5901572793645, 888.1662638811508, 553.1810349675781), 123.51314010583418, -33.51314010583418), 0), ('arc', ((847.5753861929372, 512.5901572793645, 888.1662638811508, 553.1810349675781), 90, -57.56402859145693), -1.5735633371536226), ('straight', ((885, 522, 898.6184407714723, 543.4294791071868),), -1.5735633371536208), ('arc', ((893.8228056905776, 496.2025672760867, 955.3019003941855, 557.6816619796946), -147.5640285914569, 57.56402859145689), 0), ('arc', ((893.8228056905776, 496.2025672760867, 955.3019003941855, 557.6816619796946), -90, 12.088690801570664), 0.21417497864277255), ('straight', ((931, 557, 984.4039126336075, 545.5622181522566),), 0.21417497864277268), ('arc', ((951.6947059512966, 544.6447334198017, 1034.44265498753, 627.3926824560351), 102.08869080157075, -12.088690801570749), 0), ('arc', ((951.6947059512966, 544.6447334198017, 1034.44265498753, 627.3926824560351), 90, -37.055230503180155), -0.755066478599419), ('arc', ((1008.3972439075545, 509.5535623517107, 1056.7232820289946, 557.8796004731508), -127.0552305031804, 37.0552305031804), 0), ('arc', ((1008.3972439075545, 509.5535623517107, 1056.7232820289946, 557.8796004731508), -90, 28.257819793189057), 0.537495279936224), ('arc', ((1018.8644532698634, 549.3111901400866, 1114.3352120501593, 644.7819489203825), 118.25781979318901, -28.257819793189014), 0), ('arc', ((1018.8644532698634, 549.3111901400866, 1114.3352120501593, 644.7819489203825), 90, -22.672415061762734), -0.41774348232405206), ('arc', ((1052.5366221440754, 451.43086584610626, 1158.1879230849781, 557.0821667870092), -112.67241506176273, 22.672415061762734), 0), ('arc', ((1052.5366221440754, 451.43086584610626, 1158.1879230849781, 557.0821667870092), -90, 11.61733475845017), 0.20558583667371555), ('straight', ((1116, 556, 1136.9374123847576, 551.695564557097),), 0.2055858366737156), ('arc', ((1100.7444678658235, 550.7671755865481, 1191.3825318825106, 641.4052396032353), 101.61733475845037, -11.617334758450369), 0), ('arc', ((1100.7444678658235, 550.7671755865481, 1191.3825318825106, 641.4052396032353), 90, -30.405188751695505), -0.5868182547551785), ('arc', ((1160.7064029106034, 525.7245815988232, 1194.291324753369, 559.3095034415886), -120.40518875169549, 30.40518875169549), 0), ('arc', ((1160.7064029106034, 525.7245815988232, 1194.291324753369, 559.3095034415886), -90, 22.777039083115042), 0.41988981604438474), ('arc', ((1177.667983880108, 557.1942925619484, 1198.332016119892, 577.8583248017325), 112.77703908311507, -22.77703908311507), 0), ('arc', ((1177.667983880108, 557.1942925619484, 1198.332016119892, 577.8583248017325), 90, -22.77703908311507), -0.41988981604438486)], 100.0, (-6987.2404965026135, -25093.547838100327, 19705.061941849308, 1598.7546002515955))"
  val smallToro = "([ (802.2277900499461, 345.0040378623332),\n (827, 333),\n (847.641603985156, 322.99755789747115),\n (848, 323),\n (881.0483760010288, 323.4504027205199),\n (903, 336),\n (925, 349),\n (973.6583457657765, 351.06204799080245),\n (975.780584250072, 351.1069960311381),\n (1018, 328),\n (1036, 318),\n (1066.1216851050713, 317.61894355703356),\n (1066.4928157461195, 317.6165961441358),\n (1088, 327),\n (1105.5612588002105, 334.6618297213846),\n (1124, 326),\n (1145.035039170845, 316.1185267743442),\n (1155, 318),\n (1176, 324),\n (1188.888682453069, 325.1850545895935),\n (1194, 325)],\n\n\n [('straight', (None,), None), \n('arc', ((770.6651059139854, 254.99596213766682, 833.7904741859068, 318.1213304095881), 90, -51.70750239153659), -1.2665605586137296), \n('arc', ((821.3417935137995, 224.4028211598157, 873.9414144565126, 277.00244210252885), -141.70750239153642, 51.70750239153642), 0), \n('arc', ((821.3417935137995, 224.4028211598157, 873.9414144565126, 277.00244210252885), -90, 0.7808122677932374), 0.01362858860313876), \n('straight', ((848, 277, 881.0483760010288, 276.5495972794801),), 0.013628588603139471), \n('arc', ((854.5946373547067, 224.35583760955106, 906.7908203962936, 276.55202065113787), -89.21918773220663, 57.951007471336915), 1.6467705904647396), \n('arc', ((899.0665519764244, 250.9757161614995, 953.2265890026814, 305.13575318775645), 148.73181973913043, -56.30518573328271), 0.04237809482320704), \n('straight', ((925, 251, 973.6583457657765, 248.93795200919755),), 0.04237809482320669), \n('arc', ((925.6569695507229, 248.89300396886185, 1025.904198949421, 349.14023336755986), 92.42663400584766, -2.42663400584766), 0), \n('arc', ((925.6569695507229, 248.89300396886185, 1025.904198949421, 349.14023336755986), 90, -57.38442267295002), -1.5627202007927665), \n('arc', ((1014.5787110581995, 238.6102752376089, 1057.970171670794, 282.0017358502032), -147.38442267295002, 56.6596371477458), -0.01265056857334692), \n('straight', ((1036, 282, 1066.1216851050713, 282.38105644296644),), -0.012650568573346024), \n('arc', ((1037.1533963355039, 223.70456503463282, 1095.8322351567351, 282.3834038558642), -90.72478552520401, 0.7247855252040125), 0), \n('arc', ((1037.1533963355039, 223.70456503463282, 1095.8322351567351, 282.3834038558642), -90, 47.14247797365873), 1.0777293791374933), \n('arc', ((1081.6047458864048, 265.3381702786154, 1129.5177717140161, 313.251196106227), 137.1424779736591, -47.14247797365911), 0), \n('arc', ((1081.6047458864048, 265.3381702786154, 1129.5177717140161, 313.251196106227), 90, -50.32475851604849), -1.2055654221675085), \n('arc', ((1117.7052891581645, 229.22197320029457, 1172.3647891835255, 283.8814732256558), -140.32475851604838, 50.32475851604838), 0), \n('arc', ((1117.7052891581645, 229.22197320029457, 1172.3647891835255, 283.8814732256558), -90, 21.38417031591686), 0.39157703731970317), \n('arc', ((1081.7956234967678, 274.0683128982452, 1312.2225280244143, 504.4952174258918), 111.38417031591689, -10.877548829988044), 0.18545858400541376), \n('arc', ((1118.2073437082347, 274.8149454104065, 1259.570021197903, 416.17762290007465), 100.50662148592895, -10.506621485928946), 0), \n('arc', ((1118.2073437082347, 274.8149454104065, 1259.570021197903, 416.17762290007465), 90, -4.1469612462005045), -0.07250477962321278)], 80.80666614268354, (-1913.9659136765954, -6416.705015970818, 4786.510540004914, 283.77143771069177))"
  val elToro = "([(0, 100), (1, 100), (53, 130), (77.87663602286769, 173.02389378677776), (105, 189), (138.80844393971716, 189.6103665054419), (139.13739751528135, 189.61333567324658), (157, 175), (164.61895764990842, 137.30597027707546), (206.58157118062744, 102.97649573518072), (208, 103), (251, 128), (304.83551334862835, 158.11747403392462), (356, 132), (407.4658465234587, 105.72869351022109), (454, 126), (510.6019432514129, 150.65705839357082), (569, 124), (614.0928576923639, 103.41638801761314), (652, 117), (716, 140), (716.0976936699308, 140.00008965358575), (756, 122), (802.588021472423, 100.98395755999644), (804, 101), (849, 118), (899.5, 136.42492996696978), (950, 118), (990.9277781752639, 103.06749610726911), (1028, 115), (1077.9238739223335, 131.06908867601135), (1104, 127), (1131.4805559147494, 122.7117549382088), (1167, 130), (1221, 142), (1272, 151), (1289.9429499067967, 153.86588881240067), (1319, 146), (1396.5773648755992, 124.99941926268627), (1397, 125), (1525.9275736317566, 125.35431600362193), (1554, 132), (1586.2865451016364, 139.59647152365073), (1624, 129), (1662.3446466343921, 118.22618049073486), (1699, 128), (1740.2231364123008, 138.99177767790053), (1753, 138), (1787.0858619510361, 135.3541552836504), (1814, 137), (1850.3941751602051, 139.22556489768886), (1862, 139)], [('straight', (None,), None), ('straight', ((0, 500, 1, 500),), 0.0), ('arc', ((-59.06666666666669, 379.86666666666656, 61.06666666666669, 500.0), -90.0, 59.963278737698644), 1.7294900221729474), ('straight', ((53, 470, 77.87663602286769, 426.97610621322224),), 1.7294900221729468), ('arc', ((73.57943675314395, 410.9947866150762, 137.57574323283112, 474.99109309476336), 149.9632787376986, -58.9289919763043), 0.018053670453755024), ('straight', ((105, 411, 138.80844393971716, 410.3896334945581),), 0.018053670453754955), ('arc', ((120.91355872393882, 410.3866643267534, 157.36123630662388, 446.8343419094385), 91.03428676139428, -1.0342867613942843), 0), ('arc', ((120.91355872393882, 410.3866643267534, 157.36123630662388, 446.8343419094385), 90, -78.57296902598377), -4.947399822254898), ('straight', ((157, 425, 164.61895764990842, 462.69402972292454),), -4.947399822254899), ('arc', ((163.7703456102513, 411.40105312406706, 249.39279675100357, 497.0235042648193), -168.57296902598375, 78.57296902598375), 0), ('arc', ((163.7703456102513, 411.40105312406706, 249.39279675100357, 497.0235042648193), -90, 1.898681013024003), 0.03315037062252609), ('arc', ((153.75983910608917, 392.02742639616844, 258.76123669968695, 497.0288239897662), -88.101318986976, 56.54967803324049), 1.6285551099577231), ('arc', ((241.6608139132091, 441.8825259660754, 368.0102127840476, 568.2319248369139), 148.4483590462645, -58.4483590462645), 0), ('arc', ((241.6608139132091, 441.8825259660754, 368.0102127840476, 568.2319248369139), 90, -54.085076239161594), -1.3806885458107725), ('arc', ((343.9190468171871, 367.1777070772356, 471.0126462297303, 494.2713064897789), -144.0850762391616, 54.085076239161594), 0), ('arc', ((343.9190468171871, 367.1777070772356, 471.0126462297303, 494.2713064897789), -90, 47.07801294959273), 1.0753003609628795), ('arc', ((433.30662181408326, 449.3429416064292, 587.8972646887426, 603.9335844810885), 137.07801294959273, -47.07801294959273), 0), ('arc', ((433.30662181408326, 449.3429416064292, 587.8972646887426, 603.9335844810885), 90, -49.07070874260262), -1.1532397289796994), ('arc', ((554.4082187862354, 377.21433417012975, 673.7774965984923, 496.58361198238686), -139.07070874260265, 49.07070874260265), 0), ('arc', ((554.4082187862354, 377.21433417012975, 673.7774965984923, 496.58361198238686), -90, 39.429176586417185), 0.8222624274799885), ('arc', ((615.1257040189889, 459.9998297800485, 817.2452663470779, 662.1193921081376), 129.4291765864172, -39.324015819251144), 0.0018354036919457828), ('arc', ((662.8702566161892, 459.99991034641425, 769.3251307236724, 566.4547844538974), 90.10516076716613, -0.10516076716612588), 0), ('arc', ((662.8702566161892, 459.99991034641425, 769.3251307236724, 566.4547844538974), 90, -48.560651403072825), -1.1327082302510434), ('arc', ((740.4422156668811, 374.72443082892, 864.7338272779648, 499.01604244000356), -138.5606514030728, 48.5606514030728), 0), ('arc', ((740.4422156668811, 374.72443082892, 864.7338272779648, 499.01604244000356), -90, 1.301895941759227), 0.022726282076268717), ('arc', ((729.9204137330096, 354.1509804206452, 874.7881315305394, 499.01869821817496), -88.69810405824073, 38.787109584611706), 0.8417502862996109), ('arc', ((821.0810304443996, 463.5750700330302, 977.9189695556004, 620.413009144231), 130.08900552637098, -40.08900552637098), 0), ('arc', ((821.0810304443996, 463.5750700330302, 977.9189695556004, 620.413009144231), 90, -40.08900552637098), -0.841750286299611), ('arc', ((927.373041725672, 369.82303099354704, 1054.4825146248559, 496.9325038927309), -130.08900552637093, 40.089005526370926), 0), ('arc', ((927.373041725672, 369.82303099354704, 1054.4825146248559, 496.9325038927309), -90, 35.68380920283923), 0.7181444890803903), ('arc', ((992.3369170715447, 468.93091132398865, 1163.5108307731225, 640.1048250255664), 125.68380920283923, -35.68380920283923), 0), ('arc', ((992.3369170715447, 468.93091132398865, 1163.5108307731225, 640.1048250255664), 90, -17.738555973046147), -0.31988233575684566), ('arc', ((1041.2839850626947, 296.8951033576819, 1221.6771267668041, 477.2882450617912), -107.73855597304608, 17.738555973046076), 0), ('arc', ((1041.2839850626947, 296.8951033576819, 1221.6771267668041, 477.2882450617912), -90, 23.191177960858553), 0.42841830113788054), ('arc', ((1076.3798434617654, 457.9206910193841, 1375.3577837140167, 756.8986312716354), 113.19117796085854, -21.32474050341405), 0.03258700642623992), ('arc', ((1032.2020759117677, 92.41143206972279, 1397.8876481559287, 458.097004313884), -88.13356254255555, 16.28308468799345), 0.3278073134979839), ('arc', ((1232.3407902182826, 446.13411118759933, 1347.5451095953108, 561.3384305646275), 108.14952214543791, -18.149522145437913), 0), ('arc', ((1232.3407902182826, 446.13411118759933, 1347.5451095953108, 561.3384305646275), 90, -30.29443495985288), -0.5842225317933599), ('arc', ((1242.7894288860605, 167.4247087582361, 1550.365300865138, 475.0005807373137), -120.29443495985288, 30.29443495985288), 0), ('arc', ((1242.7894288860605, 167.4247087582361, 1550.365300865138, 475.0005807373137), -90, 0.15745864086835581), 0.0027481786373636068), ('straight', ((1397, 475, 1525.9275736317566, 474.64568399637807),), 0.002748178637363724), ('arc', ((1462.4037920094681, 347.94655116703734, 1589.1031640612566, 474.6459232188258), -89.84254135913152, 26.322361696270576), 0.49814193214557795), ('arc', ((1513.8761259494997, 460.40352847634927, 1658.696964253773, 605.2243667806226), 116.47982033713916, -26.47982033713916), 0), ('arc', ((1513.8761259494997, 460.40352847634927, 1658.696964253773, 605.2243667806226), 90, -31.387883686193163), -0.6101123831312134), ('arc', ((1588.7223295457134, 334.52918533190774, 1735.9669637230709, 481.77381950926514), -121.38788368619305, 31.38788368619305), 0), ('arc', ((1588.7223295457134, 334.52918533190774, 1735.9669637230709, 481.77381950926514), -90, 29.86008676433312), 0.574098917833057), ('arc', ((1657.4264221079768, 461.00822232209947, 1823.019850716625, 626.6016509307477), 119.86008676433305, -29.860086764333047), 0), ('arc', ((1657.4264221079768, 461.00822232209947, 1823.019850716625, 626.6016509307477), 90, -8.877132739669591), -0.1561869505021062), ('arc', ((1566.2024382214747, 22.878997257226672, 2007.9692856805975, 464.6458447163496), -98.87713273966963, 8.877132739669634), 0), ('arc', ((1566.2024382214747, 22.878997257226672, 2007.9692856805975, 464.6458447163496), -90, 6.998750848198526), 0.12276243046518023), ('arc', ((1551.708406417597, 460.77443510231114, 2149.0799439028133, 1058.1459725875275), 96.99875084819855, -6.998750848198554), 0), ('arc', ((1551.708406417597, 460.77443510231114, 2149.0799439028133, 1058.1459725875275), 90, -2.226862787420856), -0.03888566948049561)], 80.0056689342404, (-2631.399993047723, -8885.58016368303, 6718.710731829961, 464.5305611946542))"

  "Joint Parser" should "parse first joint" in {
    val joint = CoasterXParser.parsePoint("(40,100)")
    joint shouldBe 'defined
  }

  "Joints Parser" should "parse example joints" in {
    val coaster = CoasterXParser.parseJoints(joints + "]")
    coaster shouldBe 'defined
  }

  it should "parse singleton list" in {
    val joints = CoasterXParser.parseJoints("(40,100)]")
    joints shouldBe 'defined
  }

  "Segment Parser" should "parse null segment" in {
    val seg = CoasterXParser.parseSection(seg1)
    seg shouldBe 'defined
  }

  it should "parse straight" in {
    val seg = CoasterXParser.parseSection(seg2)
    seg shouldBe 'defined
  }

  it should "parse arc" in {
    val seg = CoasterXParser.parseSection(seg3)
    seg shouldBe 'defined
  }

  it should "parse more 4" in {
    val seg = CoasterXParser.parseSection(seg4)
    seg shouldBe 'defined
  }

  it should "parse more 5" in {
    val seg = CoasterXParser.parseSection(seg5)
    seg shouldBe 'defined
  }

  it should "parse more 6" in {
    val seg = CoasterXParser.parseSection(seg6)
    seg shouldBe 'defined
  }

  it should "parse more 7 " in {
    val seg = CoasterXParser.parseSection(seg7)
    seg shouldBe 'defined
  }

  it should "parse more 8" in {
    val seg = CoasterXParser.parseSection(seg8)
    seg shouldBe 'defined
  }

  it should "parse segment list" in {
    val seggs = CoasterXParser.parseSections(segments + "]")
    seggs shouldBe 'defined
  }

  it should "singleton list" in {
    val segg = CoasterXParser.parseSections(seg1 + "]")
    segg shouldBe 'defined
  }

  it should "two element list" in {
    val seggs = CoasterXParser.parseSections(seg1+","+seg2+"]")
    seggs shouldBe 'defined
  }
  it should "reconstructed list" in {
    val seggs = CoasterXParser.parseSections(seg1+","+seg2+","+seg3+","+seg4+","+seg5+","+seg6+","+seg7+","+seg8+"]")
    seggs shouldBe 'defined
  }

  "Coaster Parser" should "parse example coaster" in {
    val coaster = CoasterXParser.parseFile(exampleFile1)
    coaster shouldBe 'defined
  }

  "newline" should "be whitespace" in {
    ' '.isWhitespace shouldBe true
  }

  def printFileSpec(s:String):Unit = println(new CoasterXSpec()(CoasterXParser.parseFile(s).get))

  "Spec Generator" should "generate a spec for example coaster" in {
    printFileSpec(exampleFile1)
  }


  it should "generate spec for straight line" in {
    printFileSpec(straightLine)
  }

  // quarterArc, halfArc, fullArc, simpleHill, simpleValley
  it should "generate spec for quarter arc" in {
    printFileSpec(quarterArc)
  }

  it should "generate spec for halfArc" in {
    printFileSpec(halfArc)
  }

  it should "generate spec for fullArc" in {
    printFileSpec(fullArc)
  }

  it should "generate spec for simpleHill" in {
    printFileSpec(simpleHill)
  }

  it should "generate spec for simpleValley" in {
    printFileSpec(simpleValley)
  }

  def prover(file:String) = {
    val spec = new CoasterXSpec()
    val parsed = CoasterXParser.parseFile(file).get
    val (align,_) = spec.prepareFile(parsed)
    val env = spec.envelope(align)
    env.printLoudly()
    new CoasterXProver(spec,env)(file)
  }

  "Proof Generator" should "generate proof for straight line" in { withMathematica(qeTool => {
    val pr = prover(straightLine)
    pr shouldBe 'proved
    })
  }

  it should "generate proof for quarter arc" in { withMathematica(qeTool => {
    val pr = prover(quarterArc)
    pr shouldBe 'proved
  })}

  it should "generate proof for half arc" in {  withMathematica(qeTool => {
    val pr = prover(halfArc)
    pr shouldBe 'proved
  })}

  it should "generate proof for second half arc" in {  withMathematica(qeTool => {
    val pr = prover(secondHalfArc)
    pr shouldBe 'proved
  })}

  it should "generate proof for full arc" in {  withMathematica(qeTool => {
    val pr = prover(fullArc)
    pr shouldBe 'proved
  })}

  it should "generate proof for hill" in {  withMathematica(qeTool => {
    val pr = prover(simpleHill)
    pr shouldBe 'proved
  })}

  it should "generate proof for valley" in {  withMathematica(qeTool => {
    val pr = prover(simpleValley)
    pr shouldBe 'proved
  })}

  it should "generate proof for example coaster" in { withMathematica(qeTool => {
    val pr = prover(exampleFile1)
    pr shouldBe 'proved
  })
  }

  it should "generate proof for extreme envelope" in { withMathematica(qeTool => {
    val pr = prover(extremeEnv)
    pr shouldBe 'proved
  })}

  it should "generate proof for many arc sizes" in { withMathematica(qeTool => {
    val pr = prover(multiSizeArcs)
    pr shouldBe 'proved
  })}

  it should "generate proof for shrinking Q3" in { withMathematica(qeTool => {
    val pr = prover(q3Shrinks)
    pr shouldBe 'proved
  })}

  it should "generate proof for growing Q3" in { withMathematica(qeTool => {
    val pr = prover(q3Grows)
    pr shouldBe 'proved
  })}

  it should "generate proof for The Phantom's Revenge" in { withMathematica(qeTool => {
    val pr = prover(phantomsRevenge)
    pr shouldBe 'proved
  })
  }

  it should "generate proof for Paul Gregg's backyard coaster" in { withMathematica(qeTool => {
    val pr = prover(byrc)
    pr shouldBe 'proved
  })
  }

  it should "generate proof for part of El Toro" in { withMathematica(qeTool => {
    val pr = prover(smallToro)
    pr shouldBe 'proved
  })}


  it should "generate proof for El Toro" in { withMathematica(qeTool => {
    val pr = prover(elToro)
    pr shouldBe 'proved
  })}


  "Core Parser" should "not do funny scientific notation" in {
    val x = "0.00000001".asTerm
    val str = x.prettyString
    str.asTerm shouldBe x
  }
}
