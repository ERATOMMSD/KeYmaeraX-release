package edu.cmu.cs.ls.keymaerax.btactics

import edu.cmu.cs.ls.keymaerax.core._
import edu.cmu.cs.ls.keymaerax.btactics.TacticTestBase
import edu.cmu.cs.ls.keymaerax.btactics.coasterx.CoasterXParser.File
import edu.cmu.cs.ls.keymaerax.btactics.coasterx.{CoasterXParser, CoasterXProver, CoasterXSpec}
import edu.cmu.cs.ls.keymaerax.parser.{KeYmaeraXPrettyPrinter, KeYmaeraXPrinter}
import edu.cmu.cs.ls.keymaerax.parser.StringConverter._

class CoasterXTests extends TacticTestBase {
  val exampleFile1:String = "([(40, 100), \n  (800, 100), \n  (1003, 292), \n  (1014.0703641303933, 490.6092116668379), \n  (1037.047741675357, 512.3415096403996),\n  (1060, 491), \n  (1074.5057163758297, 291.8183498791612), \n  (1198, 111)], \n [('straight', (None,), None), \n  ('straight', ((40, 500, 800, 500),), 0.0),\n  ('arc', ((596.6848958333333, 93.36979166666652, 1003.3151041666667, 500.0), -90.0, 86.80966720837762), 17.940621403912424), \n  ('straight', ((1003, 308, 1014.0703641303933, 109.3907883331621),), 17.940621403912424), \n  ('arc', ((1014.0346977885041, 87.6584903596004, 1060.0607855622097, 133.68457813330605), 176.80966720837756, -86.80966720837756), 0), \n  ('arc', ((1014.0346977885041, 87.6584903596004, 1060.0607855622097, 133.68457813330605), 90, -85.8346983689234), -13.7312522153492), \n  ('straight', ((1060, 109, 1074.5057163758297, 308.1816501208388),), -13.7312522153492), \n  ('arc', ((1073.9302486950965, 74.48837803692527, 1509.6673714837575, 510.2255008255863), -175.83469836892337, 60.33353966713379), -0.4770003569825235)], \n165, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"
  val exampleFile1Shrunk:String = "([(40,100),(800,100),(1003,292),(1014.0703641303933,490.6092116668379),(1037.047741675357,512.3415096403996),(1074.5057163758297,291.8183498791612),(1198,111)]," +
    "[('straight',(None,),None)," +
    "('straight',((40, 500, 800, 500),), 0.0)," +
    "('arc', ((596.6848958333333, 93.36979166666652, 1003.3151041666667, 500.0), -90.0, 86.80966720837762), 17.940621403912424)," +
    "('straight', ((1003, 308, 1014.0703641303933,109.3907883331621),), 17.940621403912424)," +
    "('arc', ((1014.0346977885041, 87.6584903596004,1060.0607855622097, 133.68457813330605), 176.80966720837756, -172.644366), 0)," +
    "('straight', ((1060, 109, 1074.5057163758297, 308.1816501208388),), -13.7312522153492)," +
    "('arc', ((1073.9302486950965, 74.48837803692527, 1509.6673714837575, 510.2255008255863), -175.83469836892337, 60.33353966713379), -0.4770003569825235)]" +
    ", \n165, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"

  val joints:String = "(40,100),(800,100),(1003,292),(1014.0703641303933,490.6092116668379),(1037.047741675357,512.3415096403996),(1060,491),(1074.5057163758297,291.8183498791612),(1198,111)"
  val segments:String = "('straight',(None,),None),('straight',((40,500,800,500),),0.0),('arc',((596.6848958333333,93.36979166666652,1003.3151041666667,500.0),-90.0,86.80966720837762),17.940621403912424),('straight',((1003,308,1014.0703641303933,109.3907883331621),),17.940621403912424),('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),176.80966720837756,-86.80966720837756),0),('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),90,-85.8346983689234),-13.7312522153492),('straight',((1060,109,1074.5057163758297,308.1816501208388),),-13.7312522153492),('arc',((1073.9302486950965,74.48837803692527,1509.6673714837575,510.2255008255863),-175.83469836892337,60.33353966713379),-0.4770003569825235)"
  val full:String = "([" + joints + "], [" + segments + "], 165, \n(1143.3888820234438, 306.5466392767369, 1335.184957771975, 498.342715025268))"
  val seg1:String = "('straight',(None,),None)"
  val seg2:String = "('straight',((40,500,800,500),),0.0)"
  val seg3:String = "('arc',((596.6848958333333,93.36979166666652,1003.3151041666667,500.0),-90.0,86.80966720837762),17.940621403912424)"
  val seg4:String = "('straight',((1003,308,1014.0703641303933,109.3907883331621),),17.940621403912424)"
  val seg5:String = "('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),176.80966720837756,-86.80966720837756),0)"
  val seg6:String = "('arc',((1014.0346977885041,87.6584903596004,1060.0607855622097,133.68457813330605),90,-85.8346983689234),-13.7312522153492)"
  val seg7:String = "('straight',((1060,109,1074.5057163758297,308.1816501208388),),-13.7312522153492)"
  val seg8:String = "('arc',((1073.9302486950965,74.48837803692527,1509.6673714837575,510.2255008255863),-175.83469836892337,60.33353966713379),-0.4770003569825235)"

  // More example files
  val straightLine = "([(0, 100), (1000, 100)], [('straight', (None,), None), ('straight', ((0, 500, 1000, 500),), 0.0)], 1.0, (0, 0, 0, 0))"
  val quarterArc = "([(100, 100), (171, 129)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), -90, 45.0), 1.0)], 500.0, (171, 129, 171, 129))"

  val halfArc = "([(0, 200), (100, 300)], [('straight', (None,), None),   ('arc', ((0, 300, 200, 500), -180, -90.0), 0.0)], 500.0, (100, 300, 100, 300))"
  val secondHalfArc = "([(100, 300), (200, 200)], [('straight', (None,), None),  ('arc', ((0, 300.0, 200, 500), 90.0, -90), -48.494845360825195)], 500.0, (100, 300, 100, 300))"

  val fullArc = "([(0, 200), (100, 300), (200, 200)],  [('straight', (None,), None), ('arc', ((0, 300, 200, 500), -180, -90.0), 0.0),   ('arc', ((0, 300.0, 200, 500), 90.0, -90), -48.494845360825195)], 500.0, (-800, -94.31605562579006, 198.106405394016, 906.9587020648964))"
  val simpleHill = "([(0, 100),  (100, 200),  (342, 300),   (579, 202),  (683, 102)],[('straight', (None,), None), ('straight', ((0, 500, 100, 400),), 1.0), ('arc', ((0, 300, 683, 983), 135.0, -45.0), 0), ('arc', ((0, 300, 683, 983), 90, -45.0), -1), ('straight', ((579, 398, 683, 497),), -1)], 500.0, (-2406.346757107975, -29.408888352737677, 1211.9531693319414, 3588.8910380871785))"
  val simpleValley = "([(0, 500),  (100, 400),   (199, 359),   (299, 398),   (415, 505)], [('straight', (None,), None),  ('straight', ((0, 100, 100, 200),), -1.0),  ('arc', ((59, -39, 339, 241), -135, 45), 0),  ('arc', ((51, -55, 347, 241), -90,  43), 0.92), ('straight', ((299, 202, 415, 95),), 0.92)], 500.0, (415.37482499434077, 94.97095456951104, 253.3717788455165, 243.96392952765427))"

  val extremeEnv = "([(0, 100), (2, 101), (190.0, 195.0), (243.1755319148936, 207.55304027162447), (362, 93), (369, 21)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 190.0, 405.0),), 0.5), ('arc', ((124.27142781348194, 392.44695972837553, 362.0796360163053, 630.2551679311989), 116.56505117707799, -26.56505117707799), 0), ('arc', ((124.27142781348194, 392.44695972837553, 362.0796360163053, 630.2551679311989), 90, -87.90290447650786), -27.30929095354531), ('arc', ((361.59812965425056, -114.98737769620027, 1561.6589976680903, 1085.0734903176394), -177.90290447650787, 6.911751019089309), -6.307448288452398)], 100.0, (-1394.4496268182118, -169.27348755020273, 379.944306398132, 1605.1204456661412))"
  val multiSizeArcs = "([(0, 100), (2, 101), (28.3006993006993, 107.20875289074621), (83, 70), (182.35758774599904, 2.412811809333107), (289, 103), (324.03641813626166, 136.04702800800368), (359, 104), (370.6755001986353, 93.29843391528561), (382, 102)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('arc', ((-30.50945219144552, 492.7912471092538, 87.11085079284412, 610.4115500935434), 116.56505117707799, -26.56505117707799), 0), ('arc', ((-30.50945219144552, 492.7912471092538, 87.11085079284412, 610.4115500935434), 90, -68.45035227705453), -2.5322110715441895), ('arc', ((75.53291700005333, 383.9378466987755, 289.18225849194476, 597.5871881906669), -158.45035227705455, 68.45035227705455), 0), ('arc', ((75.53291700005333, 383.9378466987755, 289.18225849194476, 597.5871881906669), -90, 86.65260084752481), 17.097027736574372), ('arc', ((288.94012058994457, 463.9529719919963, 359.13271568257875, 534.1455670846306), 176.6526008475248, -86.65260084752481), 0), ('arc', ((288.94012058994457, 463.9529719919963, 359.13271568257875, 534.1455670846306), 90, -85.01568992414752), -11.466215572099545), ('arc', ((358.95568182961495, 483.2619293466737, 382.39531856765564, 506.7015660847144), -175.01568992414758, 85.01568992414758), 0), ('arc', ((358.95568182961495, 483.2619293466737, 382.39531856765564, 506.7015660847144), -90, 75.07620846792699), 3.7520057088165677)], 100.0, (-266.2447778060458, 83.41288723251023, 393.1204503929255, 742.7781154314815))"
  val q3Grows = "([(0, 100), " +
    "(2, 101), " +
    "(14.885964912280702, 104.0419636749753), " +
    "(39, 91), " +
    "(184.19804275276192, 12.470314181327467), " +
    "(326, 86)], " +
    "" +
    "[('straight', (None,), None), " +
    " ('straight', ((1, 500, 2, 499),), 0.5), " +
    " ('arc', ((-13.927928587256055, 495.9580363250247, 43.69985841181746, 553.5858233240982), 116.56505117707799, -26.56505117707799), 0), " +
    " ('arc', ((-13.927928587256055, 495.9580363250247, 43.69985841181746, 553.5858233240982), 90, -56.813065793699124), -1.528921023359289), " +
    " ('arc', ((10.700702925553315, 240.5350061642552, 357.69538257997056, 587.5296858186725), -146.81306579369914, 56.81306579369914), 0), " +
    " ('arc', ((10.700702925553315, 240.5350061642552, 357.69538257997056, 587.5296858186725), -90, 54.81689910688371), 1.418478393372417)], " +
    "100.0, (-267.56989336035264, -0.8143009990482142, 385.66846432127187, 652.4240566825763))"
  val q3Shrinks = "([(0, 100), (2, 101), (307.52459016393436, 173.1245720764523), (581, 116), (589.2496479176547, 114.27678251817991), (609, 129)], [('straight', (None,), None), ('straight', ((1, 500, 2, 499),), 0.5), ('arc', ((-375.6491622403866, 426.8754279235477, 990.6983425682554, 1793.2229327321897), 116.56505117707799, -26.56505117707799), 0), ('arc', ((-375.6491622403866, 426.8754279235477, 990.6983425682554, 1793.2229327321897), 90, -23.59702182575377), -0.43682735866348954), ('arc', ((568.6410567200143, 444.50603508653916, 609.8582391152951, 485.7232174818201), -113.5970218257537, 23.5970218257537), 0), ('arc', ((568.6410567200143, 444.50603508653916, 609.8582391152951, 485.7232174818201), -90, 73.40655944194458), 3.3558365255981495)], 100.0, (-143.95818861385715, -23.285682656397682, 625.011771298551, 745.6842772560105))"

  val phantomsRevenge = "([(0, 100),\n (2, 101),\n (152.0, 176.0),\n (166.60135135135133, 179.4469114822773),\n (196, 161),\n (209.53710900034494, 132.97908598453802),\n (260.50528709965545, 100.99783810312744),\n (261, 101),\n (285.99809038028985, 101.2184876337596),\n (338, 121),\n (390.20718136331936, 166.6280832280135),\n (406.433701161296, 172.71961079493371),\n (429, 158),\n (462.36693133891305, 82.23444731230279),\n (496.9694094713185, 59.66384261147164),\n (502, 60),\n (554, 74),\n (566.3646248121352, 79.11932795969688),\n (587.1806951889328, 83.25820821300124),\n (616, 75),\n (644.7911078440376, 66.74987166353401),\n (650, 67),\n (737.5365249576256, 75.42634836432774),\n (755, 81),\n (774.5725368731753, 86.22681195660812),\n (801, 76),\n (822.4260132343007, 67.7086325208196),\n (840, 73),\n (856.665140664223, 84.03591313579977),\n (867.870825037044, 87.40984272063554),\n (885, 78),\n (898.6184407714723, 56.57052089281319),\n (924.5623530423816, 42.31833802030542),\n (931, 43),\n (984.4039126336075, 54.437781847743395),\n (993.0686804694133, 55.355266580198304),\n (1018, 47),\n (1032.5602629682746, 42.120399526849155),\n (1044, 45),\n (1066.5998326600113, 50.68880985991336),\n (1085, 47),\n (1105.3622726145268, 42.917833212990786),\n (1116, 44),\n (1136.9374123847576, 48.304435442903014),\n (1146.063499874167, 49.23282441345191),\n (1169, 43),\n (1177.4988638319862, 40.69049655841138),\n (1184, 42),\n (1188.0, 42.80570743805163),\n (1192, 42)], [('straight', (None,),\n None),\n ('straight', ((1, 500, 2, 499),), 0.5), ('straight', ((2, 499, 152.0, 424.0),), 0.5), ('arc', ((133.95173716637134, 420.5530885177227, 199.2509655363313, 485.8523168876826), 116.56505117707799, -26.56505117707799), 0), ('arc', ((133.95173716637134, 420.5530885177227, 199.2509655363313, 485.8523168876826), 90, -64.21447121355821), -2.069933396764995), ('straight', ((196, 439, 209.53710900034494, 467.020914015462),), -2.0699333967649944), ('arc', ((203.90093869773227, 385.7934650930262, 317.1096355015786, 499.00216189687256), -154.2144712135582, 64.2144712135582), 0), ('arc', ((203.90093869773227, 385.7934650930262, 317.1096355015786, 499.00216189687256), -90, 0.5007622722822305), 0.008740172966646956), ('straight', ((261, 499, 285.99809038028985, 498.7815123662404),), 0.00874017296664644), ('arc', ((205.21268000105053, 338.6136186830504, 365.3836323987283, 498.78457108072826), -89.49923772771783, 40.65207808141596), 0.873980974197387), ('straight', ((338, 479, 390.20718136331936, 433.3719167719865),), 0.8739809741973867), ('arc', ((381.77595730702683, 427.2803892050663, 431.0914450155652, 476.5958769136047), 131.15284035369814, -41.15284035369814), 0), ('arc', ((381.77595730702683, 427.2803892050663, 431.0914450155652, 476.5958769136047), 90, -66.23144545804345), -2.2706778731953174), ('straight', ((429, 442, 462.36693133891305, 517.7655526876972),), -2.2706778731953157), ('arc', ((459.1599729921548, 464.717284430201, 534.7788459504822, 540.3361573885284), -156.23144545804348, 66.23144545804348), 0), ('arc', ((459.1599729921548, 464.717284430201, 534.7788459504822, 540.3361573885284), -90, 7.6459447296925305), 0.13424473787079694), ('arc', ((265.84134437546186, 124.99874667510247, 682.6956888979573, 541.8530911975979), -82.35405527030747, 14.845086859599391), 0.4140301899555084), ('straight', ((554, 526, 566.3646248121352, 520.8806720403031),), 0.4140301899555053), ('arc', ((532.7651180139989, 516.7417917869988, 641.5962723638667, 625.5729461368666), 112.49103158929172, -22.491031589291723), 0), ('arc', ((532.7651180139989, 516.7417917869988, 641.5962723638667, 625.5729461368666), 90, -31.979444261190096), -0.6243706142530647), ('arc', ((590.4287711704121, 424.52545498921506, 699.153444517663, 533.250128336466), -121.97944426119014, 31.97944426119014), 0), ('arc', ((590.4287711704121, 424.52545498921506, 699.153444517663, 533.250128336466), -90, 5.4984044308156115), 0.09626094214279941), ('straight', ((650, 533, 737.5365249576256, 524.5736516356723),), 0.09626094214279966), ('arc', ((690.0182667658223, 438.04662276060697, 776.7448158305294, 524.7731718253141), -84.50159556918446, 24.40525058162565), 0.5751103919643095), ('arc', ((735.3130641497801, 513.7731880433919, 813.8320095965705, 592.2921334901823), 119.90365501244118, -29.903655012441178), 0), ('arc', ((735.3130641497801, 513.7731880433919, 813.8320095965705, 592.2921334901823), 90, -42.3105508158249), -0.9102666593017646), ('arc', ((790.5964737092104, 468.6322884289997, 854.2555527593911, 532.2913674791804), -132.31055081582502, 42.310550815825025), 0), ('arc', ((790.5964737092104, 468.6322884289997, 854.2555527593911, 532.2913674791804), -90, 33.513140105834054), 0.6622154206889976), ('straight', ((840, 527, 856.665140664223, 515.9640868642002),), 0.6622154206889975), ('arc', ((847.5753861929372, 512.5901572793645, 888.1662638811508, 553.1810349675781), 123.51314010583418, -33.51314010583418), 0), ('arc', ((847.5753861929372, 512.5901572793645, 888.1662638811508, 553.1810349675781), 90, -57.56402859145693), -1.5735633371536226), ('straight', ((885, 522, 898.6184407714723, 543.4294791071868),), -1.5735633371536208), ('arc', ((893.8228056905776, 496.2025672760867, 955.3019003941855, 557.6816619796946), -147.5640285914569, 57.56402859145689), 0), ('arc', ((893.8228056905776, 496.2025672760867, 955.3019003941855, 557.6816619796946), -90, 12.088690801570664), 0.21417497864277255), ('straight', ((931, 557, 984.4039126336075, 545.5622181522566),), 0.21417497864277268), ('arc', ((951.6947059512966, 544.6447334198017, 1034.44265498753, 627.3926824560351), 102.08869080157075, -12.088690801570749), 0), ('arc', ((951.6947059512966, 544.6447334198017, 1034.44265498753, 627.3926824560351), 90, -37.055230503180155), -0.755066478599419), ('arc', ((1008.3972439075545, 509.5535623517107, 1056.7232820289946, 557.8796004731508), -127.0552305031804, 37.0552305031804), 0), ('arc', ((1008.3972439075545, 509.5535623517107, 1056.7232820289946, 557.8796004731508), -90, 28.257819793189057), 0.537495279936224), ('arc', ((1018.8644532698634, 549.3111901400866, 1114.3352120501593, 644.7819489203825), 118.25781979318901, -28.257819793189014), 0), ('arc', ((1018.8644532698634, 549.3111901400866, 1114.3352120501593, 644.7819489203825), 90, -22.672415061762734), -0.41774348232405206), ('arc', ((1052.5366221440754, 451.43086584610626, 1158.1879230849781, 557.0821667870092), -112.67241506176273, 22.672415061762734), 0), ('arc', ((1052.5366221440754, 451.43086584610626, 1158.1879230849781, 557.0821667870092), -90, 11.61733475845017), 0.20558583667371555), ('straight', ((1116, 556, 1136.9374123847576, 551.695564557097),), 0.2055858366737156), ('arc', ((1100.7444678658235, 550.7671755865481, 1191.3825318825106, 641.4052396032353), 101.61733475845037, -11.617334758450369), 0), ('arc', ((1100.7444678658235, 550.7671755865481, 1191.3825318825106, 641.4052396032353), 90, -30.405188751695505), -0.5868182547551785), ('arc', ((1160.7064029106034, 525.7245815988232, 1194.291324753369, 559.3095034415886), -120.40518875169549, 30.40518875169549), 0), ('arc', ((1160.7064029106034, 525.7245815988232, 1194.291324753369, 559.3095034415886), -90, 22.777039083115042), 0.41988981604438474), ('arc', ((1177.667983880108, 557.1942925619484, 1198.332016119892, 577.8583248017325), 112.77703908311507, -22.77703908311507), 0), ('arc', ((1177.667983880108, 557.1942925619484, 1198.332016119892, 577.8583248017325), 90, -22.77703908311507), -0.41988981604438486)], 100.0, (-6987.2404965026135, -25093.547838100327, 19705.061941849308, 1598.7546002515955))"

  "Joint Parser" should "parse first joint" in {
    val joint = CoasterXParser.parsePoint("(40,100)")
    joint shouldBe 'defined
  }

  "Joints Parser" should "parse example joints" in {
    val coaster = CoasterXParser.parseJoints(joints + "]")
    coaster shouldBe 'defined
  }

  it should "parse singleton list" in {
    val joints = CoasterXParser.parseJoints("(40,100)]")
    joints shouldBe 'defined
  }

  "Segment Parser" should "parse null segment" in {
    val seg = CoasterXParser.parseSection(seg1)
    seg shouldBe 'defined
  }

  it should "parse straight" in {
    val seg = CoasterXParser.parseSection(seg2)
    seg shouldBe 'defined
  }

  it should "parse arc" in {
    val seg = CoasterXParser.parseSection(seg3)
    seg shouldBe 'defined
  }

  it should "parse more 4" in {
    val seg = CoasterXParser.parseSection(seg4)
    seg shouldBe 'defined
  }

  it should "parse more 5" in {
    val seg = CoasterXParser.parseSection(seg5)
    seg shouldBe 'defined
  }

  it should "parse more 6" in {
    val seg = CoasterXParser.parseSection(seg6)
    seg shouldBe 'defined
  }

  it should "parse more 7 " in {
    val seg = CoasterXParser.parseSection(seg7)
    seg shouldBe 'defined
  }

  it should "parse more 8" in {
    val seg = CoasterXParser.parseSection(seg8)
    seg shouldBe 'defined
  }

  it should "parse segment list" in {
    val seggs = CoasterXParser.parseSections(segments + "]")
    seggs shouldBe 'defined
  }

  it should "singleton list" in {
    val segg = CoasterXParser.parseSections(seg1 + "]")
    segg shouldBe 'defined
  }

  it should "two element list" in {
    val seggs = CoasterXParser.parseSections(seg1+","+seg2+"]")
    seggs shouldBe 'defined
  }
  it should "reconstructed list" in {
    val seggs = CoasterXParser.parseSections(seg1+","+seg2+","+seg3+","+seg4+","+seg5+","+seg6+","+seg7+","+seg8+"]")
    seggs shouldBe 'defined
  }

  "Coaster Parser" should "parse example coaster" in {
    val coaster = CoasterXParser.parseFile(exampleFile1)
    coaster shouldBe 'defined
  }

  "newline" should "be whitespace" in {
    ' '.isWhitespace shouldBe true
  }

  def printFileSpec(s:String):Unit = println(new CoasterXSpec()(CoasterXParser.parseFile(s).get))

  "Spec Generator" should "generate a spec for example coaster" in {
    printFileSpec(exampleFile1)
  }


  it should "generate spec for straight line" in {
    printFileSpec(straightLine)
  }

  // quarterArc, halfArc, fullArc, simpleHill, simpleValley
  it should "generate spec for quarter arc" in {
    printFileSpec(quarterArc)
  }

  it should "generate spec for halfArc" in {
    printFileSpec(halfArc)
  }

  it should "generate spec for fullArc" in {
    printFileSpec(fullArc)
  }

  it should "generate spec for simpleHill" in {
    printFileSpec(simpleHill)
  }

  it should "generate spec for simpleValley" in {
    printFileSpec(simpleValley)
  }

  def prover(file:String) = {
    val spec = new CoasterXSpec()
    val parsed = CoasterXParser.parseFile(file).get
    val (align,_) = spec.prepareFile(parsed)
    val env = spec.envelope(align)
    env.printLoudly()
    new CoasterXProver(spec,env)(file)
  }

  "Proof Generator" should "generate proof for straight line" in { withMathematica(qeTool => {
    val pr = prover(straightLine)
    pr shouldBe 'proved
    })
  }

  it should "generate proof for quarter arc" in { withMathematica(qeTool => {
    val pr = prover(quarterArc)
    pr shouldBe 'proved
  })}

  it should "generate proof for half arc" in {  withMathematica(qeTool => {
    val pr = prover(halfArc)
    pr shouldBe 'proved
  })}

  it should "generate proof for second half arc" in {  withMathematica(qeTool => {
    val pr = prover(secondHalfArc)
    pr shouldBe 'proved
  })}

  it should "generate proof for full arc" in {  withMathematica(qeTool => {
    val pr = prover(fullArc)
    pr shouldBe 'proved
  })}

  it should "generate proof for hill" in {  withMathematica(qeTool => {
    val pr = prover(simpleHill)
    pr shouldBe 'proved
  })}

  it should "generate proof for valley" in {  withMathematica(qeTool => {
    val pr = prover(simpleValley)
    pr shouldBe 'proved
  })}

  it should "generate proof for example coaster" in { withMathematica(qeTool => {
    val pr = prover(exampleFile1)
    pr shouldBe 'proved
  })
  }

  it should "generate proof for The Phantom's Revenge" in { withMathematica(qeTool => {
    val pr = prover(phantomsRevenge)
    pr shouldBe 'proved
  })
  }

  it should "generate proof for extreme envelope" in { withMathematica(qeTool => {
    val pr = prover(extremeEnv)
    pr shouldBe 'proved
  })}

  it should "generate proof for many arc sizes" in { withMathematica(qeTool => {
    val pr = prover(multiSizeArcs)
    pr shouldBe 'proved
  })}

  it should "generate proof for shrinking Q3" in { withMathematica(qeTool => {
    val pr = prover(q3Shrinks)
    pr shouldBe 'proved
  })}

  it should "generate proof for growing Q3" in { withMathematica(qeTool => {
    val pr = prover(q3Grows)
    pr shouldBe 'proved
  })}


  "Core Parser" should "not do funny scientific notation" in {
    val x = "0.00000001".asTerm
    val str = x.prettyString
    str.asTerm shouldBe x
  }
}
